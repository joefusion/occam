!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
os	py/sbsearch.py	/^import os, sys$/;"	i
sys	py/sbsearch.py	/^import os, sys$/;"	i
occam	py/sbsearch.py	/^import occam$/;"	i
time	py/sbsearch.py	/^import time$/;"	i
resource	py/sbsearch.py	/^import resource$/;"	i
ocUtils	py/sbsearch.py	/^from ocutils import ocUtils$/;"	i
swidth	py/sbsearch.py	/^	swidth = sys.argv[2]$/;"	v
slevels	py/sbsearch.py	/^	slevels = sys.argv[3]$/;"	v
swidth	py/sbsearch.py	/^	swidth = 3;$/;"	v
slevels	py/sbsearch.py	/^	slevels = 7;$/;"	v
filter	py/sbsearch.py	/^	filter = sys.argv[4]$/;"	v
filter	py/sbsearch.py	/^	filter = "loopless"$/;"	v
util	py/sbsearch.py	/^util = ocUtils("SB")			# create a variable-based manager$/;"	v
t1	py/sbsearch.py	/^t1 = time.time()$/;"	v
t2	py/sbsearch.py	/^t2 = time.time()$/;"	v
t3	py/sbsearch.py	/^t3 = time.time()$/;"	v
os	py/fit.py	/^import os, sys$/;"	i
sys	py/fit.py	/^import os, sys$/;"	i
occam	py/fit.py	/^import occam$/;"	i
time	py/fit.py	/^import time$/;"	i
ocUtils	py/fit.py	/^from ocutils import ocUtils$/;"	i
oc	py/fit.py	/^oc = ocUtils("VB")$/;"	v
t1	py/fit.py	/^t1 = time.time()$/;"	v
t2	py/fit.py	/^t2 = time.time()$/;"	v
t3	py/fit.py	/^t3 = time.time()$/;"	v
pdb	py/sbfit.py	/^import pdb$/;"	i
os	py/sbfit.py	/^import os, sys$/;"	i
sys	py/sbfit.py	/^import os, sys$/;"	i
occam	py/sbfit.py	/^import occam$/;"	i
time	py/sbfit.py	/^import time$/;"	i
ocUtils	py/sbfit.py	/^from ocutils import ocUtils$/;"	i
oc	py/sbfit.py	/^oc = ocUtils("SB")$/;"	v
t1	py/sbfit.py	/^t1 = time.time()$/;"	v
t2	py/sbfit.py	/^t2 = time.time()$/;"	v
t3	py/sbfit.py	/^t3 = time.time()$/;"	v
sys	py/ocutils.py	/^import sys, re, occam, time, heapq, ocGraph$/;"	i
re	py/ocutils.py	/^import sys, re, occam, time, heapq, ocGraph$/;"	i
occam	py/ocutils.py	/^import sys, re, occam, time, heapq, ocGraph$/;"	i
time	py/ocutils.py	/^import sys, re, occam, time, heapq, ocGraph$/;"	i
heapq	py/ocutils.py	/^import sys, re, occam, time, heapq, ocGraph$/;"	i
ocGraph	py/ocutils.py	/^import sys, re, occam, time, heapq, ocGraph$/;"	i
totalgen	py/ocutils.py	/^totalgen=0$/;"	v
totalkept	py/ocutils.py	/^totalkept=0$/;"	v
maxMemoryToUse	py/ocutils.py	/^maxMemoryToUse = 8 * 2**30$/;"	v
ocUtils	py/ocutils.py	/^class ocUtils:$/;"	c
TABSEP	py/ocutils.py	/^    TABSEP=1$/;"	v	class:ocUtils
COMMASEP	py/ocutils.py	/^    COMMASEP=2$/;"	v	class:ocUtils
SPACESEP	py/ocutils.py	/^    SPACESEP=3$/;"	v	class:ocUtils
HTMLFORMAT	py/ocutils.py	/^    HTMLFORMAT=4$/;"	v	class:ocUtils
__init__	py/ocutils.py	/^    def __init__(self,man):$/;"	m	class:ocUtils
initFromCommandLine	py/ocutils.py	/^    def initFromCommandLine(self, argv):$/;"	m	class:ocUtils
setReportVariables	py/ocutils.py	/^    def setReportVariables(self, reportAttributes):$/;"	m	class:ocUtils
setReportSeparator	py/ocutils.py	/^    def setReportSeparator(self, format):$/;"	m	class:ocUtils
setFitClassifierTarget	py/ocutils.py	/^    def setFitClassifierTarget(self, target):$/;"	m	class:ocUtils
setSkipTrainedModelTable	py/ocutils.py	/^    def setSkipTrainedModelTable(self, b):$/;"	m	class:ocUtils
setSkipIVITables	py/ocutils.py	/^    def setSkipIVITables(self, b):$/;"	m	class:ocUtils
setSkipNominal	py/ocutils.py	/^    def setSkipNominal(self, useFlag):$/;"	m	class:ocUtils
setUseInverseNotation	py/ocutils.py	/^    def setUseInverseNotation(self, useFlag):$/;"	m	class:ocUtils
setValuesAreFunctions	py/ocutils.py	/^    def setValuesAreFunctions(self, useFlag):$/;"	m	class:ocUtils
setDDFMethod	py/ocutils.py	/^    def setDDFMethod(self, DDFMethod):$/;"	m	class:ocUtils
setSortDir	py/ocutils.py	/^    def setSortDir(self, sortDir):$/;"	m	class:ocUtils
setSearchSortDir	py/ocutils.py	/^    def setSearchSortDir(self, sortDir):$/;"	m	class:ocUtils
setSearchWidth	py/ocutils.py	/^    def setSearchWidth(self, searchWidth):$/;"	m	class:ocUtils
setSearchLevels	py/ocutils.py	/^    def setSearchLevels(self, searchLevels):$/;"	m	class:ocUtils
setReportSortName	py/ocutils.py	/^    def setReportSortName(self, sortName):$/;"	m	class:ocUtils
setSearchFilter	py/ocutils.py	/^    def setSearchFilter(self, searchFilter):$/;"	m	class:ocUtils
setAlphaThreshold	py/ocutils.py	/^    def setAlphaThreshold(self, alphaThreshold):$/;"	m	class:ocUtils
setRefModel	py/ocutils.py	/^    def setRefModel(self, refModel):$/;"	m	class:ocUtils
setStartModel	py/ocutils.py	/^    def setStartModel(self, startModel):$/;"	m	class:ocUtils
getStartModel	py/ocutils.py	/^    def getStartModel(self):$/;"	m	class:ocUtils
setFitModel	py/ocutils.py	/^    def setFitModel(self, fitModel):$/;"	m	class:ocUtils
setReportFile	py/ocutils.py	/^    def setReportFile(self, reportFile):$/;"	m	class:ocUtils
setAction	py/ocutils.py	/^    def setAction(self, action):$/;"	m	class:ocUtils
setDataFile	py/ocutils.py	/^    def setDataFile(self, dataFile):$/;"	m	class:ocUtils
setCalcExpectedDV	py/ocutils.py	/^    def setCalcExpectedDV(self, calcExpectedDV):$/;"	m	class:ocUtils
setDefaultFitModel	py/ocutils.py	/^    def setDefaultFitModel(self, model):$/;"	m	class:ocUtils
setNoIPF	py/ocutils.py	/^    def setNoIPF(self, state):$/;"	m	class:ocUtils
isDirected	py/ocutils.py	/^    def isDirected(self):$/;"	m	class:ocUtils
hasTestData	py/ocutils.py	/^    def hasTestData(self):$/;"	m	class:ocUtils
__compareModels	py/ocutils.py	/^    def __compareModels(self, m1, m2):$/;"	m	class:ocUtils	file:
computeSortStatistic	py/ocutils.py	/^    def computeSortStatistic(self, model):$/;"	m	class:ocUtils
processModel	py/ocutils.py	/^    def processModel(self, level, newModelsHeap, model):$/;"	m	class:ocUtils
processLevel	py/ocutils.py	/^    def processLevel(self, level, oldModels, clear_cache_flag):$/;"	m	class:ocUtils
searchType	py/ocutils.py	/^    def searchType(self):$/;"	m	class:ocUtils
sbSearchType	py/ocutils.py	/^    def sbSearchType(self):$/;"	m	class:ocUtils
doSearch	py/ocutils.py	/^    def doSearch(self, printOptions):$/;"	m	class:ocUtils
doSbSearch	py/ocutils.py	/^    def doSbSearch(self,printOptions):$/;"	m	class:ocUtils
printSearchReport	py/ocutils.py	/^    def printSearchReport(self):$/;"	m	class:ocUtils
printSearchGraphs	py/ocutils.py	/^    def printSearchGraphs(self):$/;"	m	class:ocUtils
newl	py/ocutils.py	/^    def newl(self):$/;"	m	class:ocUtils
splitCaps	py/ocutils.py	/^    def splitCaps(self,s): $/;"	m	class:ocUtils
splitModel	py/ocutils.py	/^    def splitModel(self,modelName):$/;"	m	class:ocUtils
checkModelName	py/ocutils.py	/^    def checkModelName(self, modelName):$/;"	m	class:ocUtils
printGraph	py/ocutils.py	/^    def printGraph(self,modelName, only):$/;"	m	class:ocUtils
doFit	py/ocutils.py	/^    def doFit(self,printOptions, onlyGfx):$/;"	m	class:ocUtils
maybePrintGraphSVG	py/ocutils.py	/^    def maybePrintGraphSVG(self, model, header):$/;"	m	class:ocUtils
maybePrintGraphGephi	py/ocutils.py	/^    def maybePrintGraphGephi(self, model, header):$/;"	m	class:ocUtils
generateGraph	py/ocutils.py	/^    def generateGraph(self, model):$/;"	m	class:ocUtils
setGfx	py/ocutils.py	/^    def setGfx(self, useGfx, layout=None, gephi=False, hideIV=True, hideDV=True, fullVarNames=False, width=640, height=480, fontSize=12, nodeSize=24):$/;"	m	class:ocUtils
doAllComputations	py/ocutils.py	/^    def doAllComputations(self, model):$/;"	m	class:ocUtils
doSbFit	py/ocutils.py	/^    def doSbFit(self,printOptions):$/;"	m	class:ocUtils
occam2Settings	py/ocutils.py	/^    def occam2Settings(self):$/;"	m	class:ocUtils
doAction	py/ocutils.py	/^    def doAction(self, printOptions, onlyGfx=False):$/;"	m	class:ocUtils
printOption	py/ocutils.py	/^    def printOption(self,label, value):$/;"	m	class:ocUtils
printOptions	py/ocutils.py	/^    def printOptions(self,r_type):$/;"	m	class:ocUtils
findBestModel	py/ocutils.py	/^    def findBestModel(self):$/;"	m	class:ocUtils
computeUnaryStatistic	py/ocutils.py	/^    def computeUnaryStatistic(self, model, key, modname):$/;"	m	class:ocUtils
computeBinaryStatistic	py/ocutils.py	/^    def computeBinaryStatistic(self, compare_order, key):$/;"	m	class:ocUtils
math	py/distanceFunctions.py	/^import math$/;"	i
zipwise_fold	py/distanceFunctions.py	/^def zipwise_fold(base, fold, proj, ls):$/;"	f
zipwise_sum	py/distanceFunctions.py	/^def zipwise_sum(proj, ls):$/;"	f
zipwise_max	py/distanceFunctions.py	/^def zipwise_max(proj, ls):$/;"	f
absoluteDist	py/distanceFunctions.py	/^def absoluteDist(compare_order):$/;"	f
euclideanDist	py/distanceFunctions.py	/^def euclideanDist(compare_order):$/;"	f
bhattacharyaCoeff	py/distanceFunctions.py	/^def bhattacharyaCoeff(compare_order):$/;"	f
hellingerDist	py/distanceFunctions.py	/^def hellingerDist(compare_order):$/;"	f
PROB_MIN	py/distanceFunctions.py	/^PROB_MIN = 1e-36$/;"	v
klComponentSum	py/distanceFunctions.py	/^def klComponentSum(x, y):$/;"	f
klDist	py/distanceFunctions.py	/^def klDist(compare_order):$/;"	f
maxDist	py/distanceFunctions.py	/^def maxDist(compare_order):$/;"	f
distanceMetrics	py/distanceFunctions.py	/^distanceMetrics = {$/;"	v
computeDistanceMetric	py/distanceFunctions.py	/^def computeDistanceMetric(k, compare_order):$/;"	f
os	py/jobcontrol.py	/^import os, sys, re$/;"	i
sys	py/jobcontrol.py	/^import os, sys, re$/;"	i
re	py/jobcontrol.py	/^import os, sys, re$/;"	i
JobControl	py/jobcontrol.py	/^class JobControl:$/;"	c
showJobs	py/jobcontrol.py	/^	def showJobs(self, formFields):$/;"	m	class:JobControl
re	py/OpagCGI.py	/^import re, types, os$/;"	i
types	py/OpagCGI.py	/^import re, types, os$/;"	i
os	py/OpagCGI.py	/^import re, types, os$/;"	i
TRUE	py/OpagCGI.py	/^TRUE = 1$/;"	v
FALSE	py/OpagCGI.py	/^FALSE = 0$/;"	v
replacement_dict	py/OpagCGI.py	/^replacement_dict = {}$/;"	v
Replacer	py/OpagCGI.py	/^class Replacer:$/;"	c
__init__	py/OpagCGI.py	/^    def __init__(self, dict):$/;"	m	class:Replacer
replace	py/OpagCGI.py	/^    def replace(self, matchobj):$/;"	m	class:Replacer
OpagCGI	py/OpagCGI.py	/^class OpagCGI:$/;"	c
__init__	py/OpagCGI.py	/^    def __init__(self, template=''):$/;"	m	class:OpagCGI
set_template	py/OpagCGI.py	/^    def set_template(self, template):$/;"	m	class:OpagCGI
parse	py/OpagCGI.py	/^    def parse(self, dict, header=FALSE):$/;"	m	class:OpagCGI
out	py/OpagCGI.py	/^    def out(self, dict, header=FALSE):$/;"	m	class:OpagCGI
OpagRuntimeError	py/OpagCGI.py	/^class OpagRuntimeError(RuntimeError):$/;"	c
OpagMissingPrecondition	py/OpagCGI.py	/^class OpagMissingPrecondition(OpagRuntimeError):$/;"	c
os	py/bp.py	/^import os, sys, occam$/;"	i
sys	py/bp.py	/^import os, sys, occam$/;"	i
occam	py/bp.py	/^import os, sys, occam$/;"	i
ocUtils	py/bp.py	/^from ocutils import ocUtils$/;"	i
util	py/bp.py	/^util = ocUtils()$/;"	v
re	py/ocGraph.py	/^import re$/;"	i
itertools	py/ocGraph.py	/^import itertools$/;"	i
igraph	py/ocGraph.py	/^import igraph$/;"	i
StripDrawer	py/ocGraph.py	/^class StripDrawer(igraph.drawing.shapes.ShapeDrawer):$/;"	c
names	py/ocGraph.py	/^    names = "strip"$/;"	v	class:StripDrawer
draw_path	py/ocGraph.py	/^    def draw_path(ctx, center_x, center_y, width, height=20):$/;"	m	class:StripDrawer
intersection_point	py/ocGraph.py	/^    def intersection_point(center_x, center_y, source_x, source_y, width, height=20):$/;"	m	class:StripDrawer
textwidth	py/ocGraph.py	/^def textwidth(text, fontsize=14):$/;"	f
cairo	py/ocGraph.py	/^        import cairo$/;"	i
generate	py/ocGraph.py	/^def generate(modelName, varlist, hideIV, hideDV, dvName, fullVarNames, allHigherOrder):$/;"	f
printPlot	py/ocGraph.py	/^def printPlot(graph, layout, extension, filename, width, height, fontSize, nodeSizeOrig):$/;"	f
printSVG	py/ocGraph.py	/^def printSVG(graph, layout, width, height, fontSize, nodeSize):$/;"	f
printPDF	py/ocGraph.py	/^def printPDF(filename, graph, layout, width, height, fontSize, nodeSize):$/;"	f
printGephi	py/ocGraph.py	/^def printGephi(graph):$/;"	f
gephiNodes	py/ocGraph.py	/^def gephiNodes(graph):$/;"	f
gephiEdges	py/ocGraph.py	/^def gephiEdges(graph):$/;"	f
os	py/common.py	/^import os, cgi, sys, occam, time, string, pickle, zipfile, datetime, tempfile, cgitb, urllib2, platform, traceback$/;"	i
cgi	py/common.py	/^import os, cgi, sys, occam, time, string, pickle, zipfile, datetime, tempfile, cgitb, urllib2, platform, traceback$/;"	i
sys	py/common.py	/^import os, cgi, sys, occam, time, string, pickle, zipfile, datetime, tempfile, cgitb, urllib2, platform, traceback$/;"	i
occam	py/common.py	/^import os, cgi, sys, occam, time, string, pickle, zipfile, datetime, tempfile, cgitb, urllib2, platform, traceback$/;"	i
time	py/common.py	/^import os, cgi, sys, occam, time, string, pickle, zipfile, datetime, tempfile, cgitb, urllib2, platform, traceback$/;"	i
string	py/common.py	/^import os, cgi, sys, occam, time, string, pickle, zipfile, datetime, tempfile, cgitb, urllib2, platform, traceback$/;"	i
pickle	py/common.py	/^import os, cgi, sys, occam, time, string, pickle, zipfile, datetime, tempfile, cgitb, urllib2, platform, traceback$/;"	i
zipfile	py/common.py	/^import os, cgi, sys, occam, time, string, pickle, zipfile, datetime, tempfile, cgitb, urllib2, platform, traceback$/;"	i
datetime	py/common.py	/^import os, cgi, sys, occam, time, string, pickle, zipfile, datetime, tempfile, cgitb, urllib2, platform, traceback$/;"	i
tempfile	py/common.py	/^import os, cgi, sys, occam, time, string, pickle, zipfile, datetime, tempfile, cgitb, urllib2, platform, traceback$/;"	i
cgitb	py/common.py	/^import os, cgi, sys, occam, time, string, pickle, zipfile, datetime, tempfile, cgitb, urllib2, platform, traceback$/;"	i
urllib2	py/common.py	/^import os, cgi, sys, occam, time, string, pickle, zipfile, datetime, tempfile, cgitb, urllib2, platform, traceback$/;"	i
platform	py/common.py	/^import os, cgi, sys, occam, time, string, pickle, zipfile, datetime, tempfile, cgitb, urllib2, platform, traceback$/;"	i
traceback	py/common.py	/^import os, cgi, sys, occam, time, string, pickle, zipfile, datetime, tempfile, cgitb, urllib2, platform, traceback$/;"	i
getUniqueFilename	py/common.py	/^def getUniqueFilename(file_name):$/;"	f
pdb	py/basic.py	/^import pdb$/;"	i
os	py/basic.py	/^import os, sys$/;"	i
sys	py/basic.py	/^import os, sys$/;"	i
occam	py/basic.py	/^import occam$/;"	i
time	py/basic.py	/^import time$/;"	i
resource	py/basic.py	/^import resource$/;"	i
ocUtils	py/basic.py	/^from ocutils import ocUtils$/;"	i
swidth	py/basic.py	/^	swidth = sys.argv[2]$/;"	v
slevels	py/basic.py	/^	slevels = sys.argv[3]$/;"	v
swidth	py/basic.py	/^	swidth = 3;$/;"	v
slevels	py/basic.py	/^	slevels = 7;$/;"	v
filter	py/basic.py	/^	filter = sys.argv[4]$/;"	v
filter	py/basic.py	/^	filter = "loopless"$/;"	v
util	py/basic.py	/^util = ocUtils("VB")			# create a variable-based manager$/;"	v
t1	py/basic.py	/^t1 = time.time()$/;"	v
t2	py/basic.py	/^t2 = time.time()$/;"	v
t3	py/basic.py	/^t3 = time.time()$/;"	v
sys	py/occammail.py	/^import sys, os, smtplib, socket$/;"	i
os	py/occammail.py	/^import sys, os, smtplib, socket$/;"	i
smtplib	py/occammail.py	/^import sys, os, smtplib, socket$/;"	i
socket	py/occammail.py	/^import sys, os, smtplib, socket$/;"	i
MIMEText	py/occammail.py	/^    from email.MIMEText import MIMEText$/;"	i
MIMEMultipart	py/occammail.py	/^    from email.MIMEMultipart import MIMEMultipart$/;"	i
MIMEText	py/occammail.py	/^    from email.mime.text import MIMEText$/;"	i
MIMEMultipart	py/occammail.py	/^    from email.mime.multipart import MIMEMultipart$/;"	i
sendMessage	py/occammail.py	/^def sendMessage(toaddr, msg):$/;"	f
buildMessage	py/occammail.py	/^def buildMessage(infile, filename, emailSubject):$/;"	f
toaddr	py/occammail.py	/^toaddr = sys.argv[1]$/;"	v
filename	py/occammail.py	/^filename = sys.argv[2]$/;"	v
emailSubject	py/occammail.py	/^emailSubject = sys.argv[3].decode("hex")$/;"	v
msg	py/occammail.py	/^msg = buildMessage(sys.stdin, filename, emailSubject)$/;"	v
os	py/weboccam.py	/^import os, cgi, sys, occam, time, string, pickle, zipfile, datetime, tempfile, cgitb, urllib2, platform, traceback, distanceFunctions$/;"	i
cgi	py/weboccam.py	/^import os, cgi, sys, occam, time, string, pickle, zipfile, datetime, tempfile, cgitb, urllib2, platform, traceback, distanceFunctions$/;"	i
sys	py/weboccam.py	/^import os, cgi, sys, occam, time, string, pickle, zipfile, datetime, tempfile, cgitb, urllib2, platform, traceback, distanceFunctions$/;"	i
occam	py/weboccam.py	/^import os, cgi, sys, occam, time, string, pickle, zipfile, datetime, tempfile, cgitb, urllib2, platform, traceback, distanceFunctions$/;"	i
time	py/weboccam.py	/^import os, cgi, sys, occam, time, string, pickle, zipfile, datetime, tempfile, cgitb, urllib2, platform, traceback, distanceFunctions$/;"	i
string	py/weboccam.py	/^import os, cgi, sys, occam, time, string, pickle, zipfile, datetime, tempfile, cgitb, urllib2, platform, traceback, distanceFunctions$/;"	i
pickle	py/weboccam.py	/^import os, cgi, sys, occam, time, string, pickle, zipfile, datetime, tempfile, cgitb, urllib2, platform, traceback, distanceFunctions$/;"	i
zipfile	py/weboccam.py	/^import os, cgi, sys, occam, time, string, pickle, zipfile, datetime, tempfile, cgitb, urllib2, platform, traceback, distanceFunctions$/;"	i
datetime	py/weboccam.py	/^import os, cgi, sys, occam, time, string, pickle, zipfile, datetime, tempfile, cgitb, urllib2, platform, traceback, distanceFunctions$/;"	i
tempfile	py/weboccam.py	/^import os, cgi, sys, occam, time, string, pickle, zipfile, datetime, tempfile, cgitb, urllib2, platform, traceback, distanceFunctions$/;"	i
cgitb	py/weboccam.py	/^import os, cgi, sys, occam, time, string, pickle, zipfile, datetime, tempfile, cgitb, urllib2, platform, traceback, distanceFunctions$/;"	i
urllib2	py/weboccam.py	/^import os, cgi, sys, occam, time, string, pickle, zipfile, datetime, tempfile, cgitb, urllib2, platform, traceback, distanceFunctions$/;"	i
platform	py/weboccam.py	/^import os, cgi, sys, occam, time, string, pickle, zipfile, datetime, tempfile, cgitb, urllib2, platform, traceback, distanceFunctions$/;"	i
traceback	py/weboccam.py	/^import os, cgi, sys, occam, time, string, pickle, zipfile, datetime, tempfile, cgitb, urllib2, platform, traceback, distanceFunctions$/;"	i
distanceFunctions	py/weboccam.py	/^import os, cgi, sys, occam, time, string, pickle, zipfile, datetime, tempfile, cgitb, urllib2, platform, traceback, distanceFunctions$/;"	i
clock	py/weboccam.py	/^from time import clock$/;"	i
ocUtils	py/weboccam.py	/^from ocutils import ocUtils$/;"	i
OpagCGI	py/weboccam.py	/^from OpagCGI import OpagCGI$/;"	i
JobControl	py/weboccam.py	/^from jobcontrol import JobControl$/;"	i
ocGraph	py/weboccam.py	/^import ocGraph$/;"	i
VERSION	py/weboccam.py	/^VERSION = "3.4.0"$/;"	v
stdout_save	py/weboccam.py	/^stdout_save = None$/;"	v
datadir	py/weboccam.py	/^datadir = "data"$/;"	v
globalOcInstance	py/weboccam.py	/^globalOcInstance = None$/;"	v
apply_if	py/weboccam.py	/^def apply_if(predicate, func, val):$/;"	f
getDataFileName	py/weboccam.py	/^def getDataFileName(formFields, trim=false, key='datafilename'):$/;"	f
useGfx	py/weboccam.py	/^def useGfx(formFields):$/;"	f
csvname	py/weboccam.py	/^csvname = ""$/;"	v
printHeaders	py/weboccam.py	/^def printHeaders(formFields, textFormat):$/;"	f
printTop	py/weboccam.py	/^def printTop(template, textFormat):$/;"	f
printTime	py/weboccam.py	/^def printTime(textFormat):$/;"	f
attemptParseInt	py/weboccam.py	/^def attemptParseInt(string, default, msg, verbose):$/;"	f
graphWidth	py/weboccam.py	/^def graphWidth():$/;"	f
graphHeight	py/weboccam.py	/^def graphHeight():$/;"	f
graphFontSize	py/weboccam.py	/^def graphFontSize():$/;"	f
graphNodeSize	py/weboccam.py	/^def graphNodeSize():$/;"	f
outputToZip	py/weboccam.py	/^def outputToZip(oc):$/;"	f
printBottom	py/weboccam.py	/^def printBottom():$/;"	f
printForm	py/weboccam.py	/^def printForm(formFields):$/;"	f
actionForm	py/weboccam.py	/^def actionForm(form, errorText):$/;"	f
getDataFileAlloc	py/weboccam.py	/^def getDataFileAlloc(formFields, key='datafilename'):$/;"	f
getDataFileAllocByName	py/weboccam.py	/^def getDataFileAllocByName(fn, data):$/;"	f
getDataFile	py/weboccam.py	/^def getDataFile(formFields):$/;"	f
prepareCachedData	py/weboccam.py	/^def prepareCachedData(formFields):$/;"	f
unpackToString	py/weboccam.py	/^    def unpackToString(fn, data):$/;"	f	function:prepareCachedData
unzipDataFile	py/weboccam.py	/^def unzipDataFile(datafile):$/;"	f
processFit	py/weboccam.py	/^def processFit(fn, model, negativeDVforConfusion, oc, onlyGfx):$/;"	f
processSBFit	py/weboccam.py	/^def processSBFit(fn, model, negativeDVforConfusion, oc, onlyGfx):$/;"	f
maybeSkipResiduals	py/weboccam.py	/^def maybeSkipResiduals(formFields, oc):$/;"	f
maybeSkipIVIs	py/weboccam.py	/^def maybeSkipIVIs(formFields, oc):$/;"	f
handleGraphOptions	py/weboccam.py	/^def handleGraphOptions(oc, formFields):$/;"	f
actionFit	py/weboccam.py	/^def actionFit(formFields):$/;"	f
actionFitBatch	py/weboccam.py	/^def actionFitBatch(formFields):$/;"	f
actionSBFit	py/weboccam.py	/^def actionSBFit(formFields):$/;"	f
actionSearch	py/weboccam.py	/^def actionSearch(formFields):$/;"	f
actionBatchCompare	py/weboccam.py	/^def actionBatchCompare(formFields):$/;"	f
makePairs	py/weboccam.py	/^    def makePairs(zip_data):$/;"	f	function:actionBatchCompare
extract	py/weboccam.py	/^    def extract(x):$/;"	f	function:actionBatchCompare
getStatHeaders	py/weboccam.py	/^    def getStatHeaders():$/;"	f	function:actionBatchCompare
bracket	py/weboccam.py	/^    def bracket(s, hl, hr, tl, tr):$/;"	f	function:actionBatchCompare
computeBestModel	py/weboccam.py	/^    def computeBestModel(filename): $/;"	f	function:actionBatchCompare
selectBest	py/weboccam.py	/^    def selectBest(stats):$/;"	f	function:actionBatchCompare
computeBinaryStatistics	py/weboccam.py	/^    def computeBinaryStatistics(report_items, comp_order):$/;"	f	function:actionBatchCompare
computeModelStats	py/weboccam.py	/^    def computeModelStats(model_A, model_B):$/;"	f	function:actionBatchCompare
runAnalysis	py/weboccam.py	/^    def runAnalysis(pair_name, file_A, file_B): $/;"	f	function:actionBatchCompare
ppOptions	py/weboccam.py	/^    def ppOptions():$/;"	f	function:actionBatchCompare
ppColumnList	py/weboccam.py	/^    def ppColumnList():$/;"	f	function:actionBatchCompare
ppAnalysis	py/weboccam.py	/^    def ppAnalysis(row):$/;"	f	function:actionBatchCompare
ppStats	py/weboccam.py	/^    def ppStats(stats_1, stats_2):$/;"	f	function:actionBatchCompare
ppHeader	py/weboccam.py	/^    def ppHeader():$/;"	f	function:actionBatchCompare
actionSBSearch	py/weboccam.py	/^def actionSBSearch(formFields):$/;"	f
actionShowLog	py/weboccam.py	/^def actionShowLog(formFields):$/;"	f
actionError	py/weboccam.py	/^def actionError():$/;"	f
getFormFields	py/weboccam.py	/^def getFormFields(form):$/;"	f
getTimestampedFilename	py/weboccam.py	/^def getTimestampedFilename(file_name):$/;"	f
startBatch	py/weboccam.py	/^def startBatch(formFields):$/;"	f
getWebControls	py/weboccam.py	/^def getWebControls():$/;"	f
getBatchControls	py/weboccam.py	/^def getBatchControls():$/;"	f
printBatchLog	py/weboccam.py	/^def printBatchLog(email):$/;"	f
startNormal	py/weboccam.py	/^def startNormal(formFields):$/;"	f
finalizeGfx	py/weboccam.py	/^def finalizeGfx():$/;"	f
template	py/weboccam.py	/^template = OpagCGI()$/;"	v
datafile	py/weboccam.py	/^datafile = ""$/;"	v
textFormat	py/weboccam.py	/^textFormat = ""$/;"	v
printOptions	py/weboccam.py	/^printOptions = ""$/;"	v
startt	py/weboccam.py	/^startt = time.time()$/;"	v
argc	py/weboccam.py	/^argc = len(sys.argv)$/;"	v
formFields	py/weboccam.py	/^    formFields = getWebControls()$/;"	v
textFormat	py/weboccam.py	/^textFormat = formFields.get("format", "") != ""$/;"	v
textFormat	py/weboccam.py	/^    textFormat = 0$/;"	v
printOptions	py/weboccam.py	/^    printOptions = "true"$/;"	v
textFormat	py/weboccam.py	/^    textFormat = 0$/;"	v
r1	py/weboccam.py	/^    r1 = formFields.pop('gfx', None)$/;"	v
r2	py/weboccam.py	/^    r2 = formFields.pop('gephi', None)$/;"	v
t	py/weboccam.py	/^    t = (r1 != None) or (r2 != None)$/;"	v
SHELL	Makefile	/^SHELL = \/bin\/sh$/;"	m
INSTALL_ROOT	Makefile	/^INSTALL_ROOT = install$/;"	m
WEB_ROOT	Makefile	/^WEB_ROOT = $(INSTALL_ROOT)\/web$/;"	m
CL_ROOT	Makefile	/^CL_ROOT = $(INSTALL_ROOT)\/cl$/;"	m
PY_INCLUDE	Makefile	/^PY_INCLUDE = \/usr\/include\/python2.7$/;"	m
HEADERS	Makefile	/^HEADERS = \\$/;"	m
CPP_FILES	Makefile	/^CPP_FILES = \\$/;"	m
CORE_FILES	Makefile	/^CORE_FILES = \\$/;"	m
CL_FILES	Makefile	/^CL_FILES = \\$/;"	m
WEB_FILES	Makefile	/^WEB_FILES = \\$/;"	m
___Input	include/Input.h	/^#define ___Input$/;"	d
___AttributeList	include/AttributeList.h	/^#define ___AttributeList$/;"	d
AttributeList	include/AttributeList.h	/^class AttributeList {$/;"	c
names	include/AttributeList.h	/^        const char** names;$/;"	m	class:AttributeList
values	include/AttributeList.h	/^        double *values;$/;"	m	class:AttributeList
attrCount	include/AttributeList.h	/^        int attrCount;$/;"	m	class:AttributeList
maxAttrCount	include/AttributeList.h	/^        int maxAttrCount;$/;"	m	class:AttributeList
___Relation	include/Relation.h	/^#define ___Relation$/;"	d
Relation	include/Relation.h	/^class Relation {$/;"	c
getKeySize	include/Relation.h	/^        int getKeySize() {$/;"	f	class:Relation
getHashNext	include/Relation.h	/^        Relation *getHashNext() {$/;"	f	class:Relation
setHashNext	include/Relation.h	/^        void setHashNext(Relation *next) {$/;"	f	class:Relation
getAttributeList	include/Relation.h	/^        class AttributeList *getAttributeList() {$/;"	f	class:Relation
varList	include/Relation.h	/^        VariableList *varList; \/\/ variable list associated with this relation$/;"	m	class:Relation
vars	include/Relation.h	/^        int *vars; \/\/ array of variable indices$/;"	m	class:Relation
states	include/Relation.h	/^        int *states; \/\/ARRAY OF STATES associated with each$/;"	m	class:Relation
varCount	include/Relation.h	/^        int varCount; \/\/ number of vars in relation$/;"	m	class:Relation
maxVarCount	include/Relation.h	/^        int maxVarCount; \/\/ size of vars array$/;"	m	class:Relation
table	include/Relation.h	/^        class Table *table;$/;"	m	class:Relation	typeref:class:Relation::Table
stateConstraints	include/Relation.h	/^        class StateConstraint *stateConstraints; \/\/ state constraints$/;"	m	class:Relation	typeref:class:Relation::StateConstraint
hashNext	include/Relation.h	/^        Relation *hashNext; \/\/ linkage for storing relations in a hash table$/;"	m	class:Relation
mask	include/Relation.h	/^        KeySegment *mask; \/\/ mask has zero for variables in this rel, 1's elsewhere$/;"	m	class:Relation
attributeList	include/Relation.h	/^        class AttributeList *attributeList;$/;"	m	class:Relation	typeref:class:Relation::AttributeList
printName	include/Relation.h	/^        char *printName;$/;"	m	class:Relation
inverseName	include/Relation.h	/^        char *inverseName;$/;"	m	class:Relation
indepOnly	include/Relation.h	/^        int indepOnly; \/\/ remembers if relation is independent only$/;"	m	class:Relation
___VariableList	include/VariableList.h	/^#define ___VariableList$/;"	d
VariableList	include/VariableList.h	/^class VariableList {$/;"	c
getVarCount	include/VariableList.h	/^        int getVarCount() {$/;"	f	class:VariableList
getVarCountDF	include/VariableList.h	/^        int getVarCountDF() {$/;"	f	class:VariableList
getMaxAbbrevLen	include/VariableList.h	/^        int getMaxAbbrevLen() {$/;"	f	class:VariableList
vars	include/VariableList.h	/^        Variable *vars;$/;"	m	class:VariableList
varCount	include/VariableList.h	/^        int varCount; \/\/ number of variables defined so far$/;"	m	class:VariableList
varCountDF	include/VariableList.h	/^        int varCountDF; \/\/(Anjali) original no. of variables in data file, some may be marked for no use$/;"	m	class:VariableList
maxVarCount	include/VariableList.h	/^        int maxVarCount; \/\/ max number of variables$/;"	m	class:VariableList
maxAbbrevLen	include/VariableList.h	/^        int maxAbbrevLen;$/;"	m	class:VariableList
noUseMaskSize	include/VariableList.h	/^        int noUseMaskSize;$/;"	m	class:VariableList
noUseMask	include/VariableList.h	/^        bool *noUseMask;$/;"	m	class:VariableList
___StateConstraint	include/StateConstraint.h	/^#define ___StateConstraint$/;"	d
StateConstraint	include/StateConstraint.h	/^class StateConstraint {$/;"	c
constraints	include/StateConstraint.h	/^        KeySegment *constraints;$/;"	m	class:StateConstraint
constraintCount	include/StateConstraint.h	/^        long constraintCount;$/;"	m	class:StateConstraint
maxConstraintCount	include/StateConstraint.h	/^        long maxConstraintCount;$/;"	m	class:StateConstraint
keysize	include/StateConstraint.h	/^        int keysize;$/;"	m	class:StateConstraint
___Types	include/Types.h	/^#define ___Types$/;"	d
KeySegment	include/Types.h	/^typedef unsigned long KeySegment;$/;"	t
ocTupleValue	include/Types.h	/^typedef double ocTupleValue;$/;"	t
Direction	include/Types.h	/^enum class Direction { Ascending, Descending };$/;"	c
Ascending	include/Types.h	/^enum class Direction { Ascending, Descending };$/;"	m	class:Direction
TableType	include/Types.h	/^enum class TableType { InformationTheoretic, SetTheoretic };$/;"	c
InformationTheoretic	include/Types.h	/^enum class TableType { InformationTheoretic, SetTheoretic };$/;"	m	class:TableType
___Key	include/Key.h	/^#define ___Key$/;"	d
Key	include/Key.h	/^namespace Key {$/;"	n
___StateBasedManager	include/SBMManager.h	/^#define ___StateBasedManager$/;"	d
SBMManager	include/SBMManager.h	/^class SBMManager: public ManagerBase {$/;"	c
getTopRefModel	include/SBMManager.h	/^        Model *getTopRefModel() {$/;"	f	class:SBMManager
getBottomRefModel	include/SBMManager.h	/^        Model *getBottomRefModel() {$/;"	f	class:SBMManager
getRefModel	include/SBMManager.h	/^        Model *getRefModel() {$/;"	f	class:SBMManager
getSearchDirection	include/SBMManager.h	/^        int getSearchDirection() {$/;"	f	class:SBMManager
setMakeProjection	include/SBMManager.h	/^        void setMakeProjection(bool proj) {$/;"	f	class:SBMManager
makeProjection	include/SBMManager.h	/^        bool makeProjection() {$/;"	f	class:SBMManager
getSearch	include/SBMManager.h	/^        class SearchBase *getSearch() {$/;"	f	class:SBMManager
RelOp	include/SBMManager.h	/^        enum RelOp {$/;"	g	class:SBMManager
LESSTHAN	include/SBMManager.h	/^            LESSTHAN, EQUALS, GREATERTHAN$/;"	e	enum:SBMManager::RelOp
EQUALS	include/SBMManager.h	/^            LESSTHAN, EQUALS, GREATERTHAN$/;"	e	enum:SBMManager::RelOp
GREATERTHAN	include/SBMManager.h	/^            LESSTHAN, EQUALS, GREATERTHAN$/;"	e	enum:SBMManager::RelOp
getSortAttr	include/SBMManager.h	/^        const char *getSortAttr() {$/;"	f	class:SBMManager
setDirectionection	include/SBMManager.h	/^        void setDirectionection(int dir) {$/;"	f	class:SBMManager
getDirectionection	include/SBMManager.h	/^        int getDirectionection() {$/;"	f	class:SBMManager
projection	include/SBMManager.h	/^        bool projection;$/;"	m	class:SBMManager
search	include/SBMManager.h	/^        class SearchBase *search;$/;"	m	class:SBMManager	typeref:class:SBMManager::SearchBase
filterAttr	include/SBMManager.h	/^        char *filterAttr;$/;"	m	class:SBMManager
filterValue	include/SBMManager.h	/^        double filterValue;$/;"	m	class:SBMManager
sortAttr	include/SBMManager.h	/^        char *sortAttr;$/;"	m	class:SBMManager
sortDirection	include/SBMManager.h	/^        int sortDirection;$/;"	m	class:SBMManager
filterOp	include/SBMManager.h	/^        RelOp filterOp;$/;"	m	class:SBMManager
___VariableBasedManager	include/VBMManager.h	/^#define ___VariableBasedManager$/;"	d
VBMManager	include/VBMManager.h	/^class VBMManager: public ManagerBase {$/;"	c
getTopRefModel	include/VBMManager.h	/^    Model *getTopRefModel() {$/;"	f	class:VBMManager
getBottomRefModel	include/VBMManager.h	/^    Model *getBottomRefModel() {$/;"	f	class:VBMManager
getRefModel	include/VBMManager.h	/^    Model *getRefModel() {$/;"	f	class:VBMManager
getUseInverseNotation	include/VBMManager.h	/^    int getUseInverseNotation() {$/;"	f	class:VBMManager
setMakeProjection	include/VBMManager.h	/^    void setMakeProjection(bool proj) {$/;"	f	class:VBMManager
makeProjection	include/VBMManager.h	/^    bool makeProjection() {$/;"	f	class:VBMManager
getSearch	include/VBMManager.h	/^    class SearchBase *getSearch() {$/;"	f	class:VBMManager
RelOp	include/VBMManager.h	/^    enum RelOp {$/;"	g	class:VBMManager
LESSTHAN	include/VBMManager.h	/^        LESSTHAN, EQUALS, GREATERTHAN$/;"	e	enum:VBMManager::RelOp
EQUALS	include/VBMManager.h	/^        LESSTHAN, EQUALS, GREATERTHAN$/;"	e	enum:VBMManager::RelOp
GREATERTHAN	include/VBMManager.h	/^        LESSTHAN, EQUALS, GREATERTHAN$/;"	e	enum:VBMManager::RelOp
getSortAttr	include/VBMManager.h	/^    const char *getSortAttr() {$/;"	f	class:VBMManager
setDirectionection	include/VBMManager.h	/^    void setDirectionection(int dir) {$/;"	f	class:VBMManager
getDirectionection	include/VBMManager.h	/^    int getDirectionection() {$/;"	f	class:VBMManager
projection	include/VBMManager.h	/^    bool projection;$/;"	m	class:VBMManager
search	include/VBMManager.h	/^    class SearchBase *search;$/;"	m	class:VBMManager	typeref:class:VBMManager::SearchBase
filterAttr	include/VBMManager.h	/^    char *filterAttr;$/;"	m	class:VBMManager
filterValue	include/VBMManager.h	/^    double filterValue;$/;"	m	class:VBMManager
sortAttr	include/VBMManager.h	/^    char *sortAttr;$/;"	m	class:VBMManager
sortDirection	include/VBMManager.h	/^    int sortDirection;$/;"	m	class:VBMManager
filterOp	include/VBMManager.h	/^    RelOp filterOp;$/;"	m	class:VBMManager
useInverseNotation	include/VBMManager.h	/^    int useInverseNotation;$/;"	m	class:VBMManager
firstCome	include/VBMManager.h	/^    bool firstCome;$/;"	m	class:VBMManager
firstComeBP	include/VBMManager.h	/^    bool firstComeBP;$/;"	m	class:VBMManager
refer_AIC	include/VBMManager.h	/^    double refer_AIC;$/;"	m	class:VBMManager
refer_BIC	include/VBMManager.h	/^    double refer_BIC;$/;"	m	class:VBMManager
refer_BP_AIC	include/VBMManager.h	/^    double refer_BP_AIC;$/;"	m	class:VBMManager
refer_BP_BIC	include/VBMManager.h	/^    double refer_BP_BIC;$/;"	m	class:VBMManager
DDFMethod	include/VBMManager.h	/^    int DDFMethod; \/\/ method to use for computing DDF. 0=new (default); 1=old$/;"	m	class:VBMManager
___SearchBase	include/SearchBase.h	/^#define ___SearchBase$/;"	d
SearchBase	include/SearchBase.h	/^class SearchBase {$/;"	c
isDirected	include/SearchBase.h	/^    bool isDirected() { return directed; }$/;"	f	class:SearchBase
makeProjection	include/SearchBase.h	/^    bool makeProjection() { return projection; }$/;"	f	class:SearchBase
getManager	include/SearchBase.h	/^    ManagerBase *getManager() { return manager; }$/;"	f	class:SearchBase
setManager	include/SearchBase.h	/^    void setManager(ManagerBase *mgr) { manager = mgr; }$/;"	f	class:SearchBase
setDirected	include/SearchBase.h	/^    void setDirected(bool dir) { directed = dir; }$/;"	f	class:SearchBase
setMakeProjection	include/SearchBase.h	/^    void setMakeProjection(bool proj) { projection = proj; }$/;"	f	class:SearchBase
manager	include/SearchBase.h	/^    ManagerBase *manager;$/;"	m	class:SearchBase
directed	include/SearchBase.h	/^    bool directed;	\/\/ system is directed (has dependent variables)$/;"	m	class:SearchBase
projection	include/SearchBase.h	/^    bool projection; \/\/ create a projection table for all new relations$/;"	m	class:SearchBase
SearchFactory	include/SearchBase.h	/^class SearchFactory {$/;"	c
___attrDesc	include/attrDescs.h	/^#define ___attrDesc$/;"	d
attrDesc	include/attrDescs.h	/^class attrDesc {$/;"	c
name	include/attrDescs.h	/^        const char *name;$/;"	m	class:attrDesc
title	include/attrDescs.h	/^        const char *title;$/;"	m	class:attrDesc
fmt	include/attrDescs.h	/^        const char *fmt;$/;"	m	class:attrDesc
attrDescriptions	include/attrDescs.h	/^constexpr attrDesc attrDescriptions[] = { $/;"	v
___Variable	include/Variable.h	/^#define ___Variable$/;"	d
Variable	include/Variable.h	/^class Variable { \/\/ internal use only - see VariableList$/;"	c
cardinality	include/Variable.h	/^        int cardinality; \/\/ number of values of the variable$/;"	m	class:Variable
segment	include/Variable.h	/^        int segment; \/\/ which KeySegment of the key this variable is in$/;"	m	class:Variable
shift	include/Variable.h	/^        int shift; \/\/ starting rightmost bit position of value in segment$/;"	m	class:Variable
size	include/Variable.h	/^        int size; \/\/ number of bits (log2 of (cardinality+1))$/;"	m	class:Variable
dv	include/Variable.h	/^        bool dv; \/\/ is it a dependent variable?$/;"	m	class:Variable
mask	include/Variable.h	/^        KeySegment mask; \/\/ a bitmask of 1's in the bit positions for this variable$/;"	m	class:Variable
name	include/Variable.h	/^        char name[MAXNAMELEN + 1]; \/\/ long name of variable (max 32 chars)$/;"	m	class:Variable
abbrev	include/Variable.h	/^        char abbrev[MAXABBREVLEN + 1]; \/\/ abbreviated name for variable$/;"	m	class:Variable
valmap	include/Variable.h	/^        char* valmap[MAXCARDINALITY]; \/\/ maps input file values to nominal values$/;"	m	class:Variable
rebin	include/Variable.h	/^        bool rebin; \/\/is rebinning required for this variable$/;"	m	class:Variable
oldnew	include/Variable.h	/^        char * oldnew[2][MAXCARDINALITY];$/;"	m	class:Variable
old_card	include/Variable.h	/^        int old_card;$/;"	m	class:Variable
exclude	include/Variable.h	/^        char *exclude;$/;"	m	class:Variable
___Globals	include/Globals.h	/^#define ___Globals$/;"	d
___Options	include/Options.h	/^#define ___Options$/;"	d
MAXLINE	include/Options.h	/^#define MAXLINE /;"	d
Options	include/Options.h	/^class Options {$/;"	c
defaultOptDef	include/Options.h	/^	class ocOptionDef *defaultOptDef;$/;"	m	class:Options	typeref:class:Options::ocOptionDef
defs	include/Options.h	/^	class ocOptionDef *defs;$/;"	m	class:Options	typeref:class:Options::ocOptionDef
options	include/Options.h	/^	class ocOption *options;$/;"	m	class:Options	typeref:class:Options::ocOption
___ModelCache	include/ModelCache.h	/^#define ___ModelCache$/;"	d
MODELCACHE_HASHSIZE	include/ModelCache.h	/^#define MODELCACHE_HASHSIZE /;"	d
ModelCache	include/ModelCache.h	/^class ModelCache {$/;"	c
hash	include/ModelCache.h	/^	class Model **hash;$/;"	m	class:ModelCache	typeref:class:ModelCache::Model
___Constants	include/Constants.h	/^#define ___Constants$/;"	d
DONT_CARE	include/Constants.h	/^const int DONT_CARE = 0xffffffff; \/\/ all bits on$/;"	v
KEY_SEGMENT_BITS	include/Constants.h	/^const int KEY_SEGMENT_BITS = 32; \/\/ number of usable bits in a key segment$/;"	v
MAXNAMELEN	include/Constants.h	/^const int MAXNAMELEN = 32;$/;"	v
MAXABBREVLEN	include/Constants.h	/^const int MAXABBREVLEN = 8;$/;"	v
MAXCARDINALITY	include/Constants.h	/^const int MAXCARDINALITY = 65535;$/;"	v
ALL	include/Constants.h	/^const int ALL = 1;$/;"	v
REST_ALL	include/Constants.h	/^const int REST_ALL = -1;$/;"	v
KEEP	include/Constants.h	/^const int KEEP = 1;$/;"	v
DISCARD	include/Constants.h	/^const int DISCARD = -1;$/;"	v
PRINT_MIN	include/Constants.h	/^const double PRINT_MIN = 1e-8;$/;"	v
PROB_MIN	include/Constants.h	/^const double PROB_MIN = 1e-36;$/;"	v
OLD_ROW	include/Constants.h	/^#define OLD_ROW /;"	d
NEW_ROW	include/Constants.h	/^#define NEW_ROW /;"	d
ATTRIBUTE_LEVEL	include/Constants.h	/^#define ATTRIBUTE_LEVEL /;"	d
ATTRIBUTE_H	include/Constants.h	/^#define ATTRIBUTE_H /;"	d
ATTRIBUTE_T	include/Constants.h	/^#define ATTRIBUTE_T /;"	d
ATTRIBUTE_DF	include/Constants.h	/^#define ATTRIBUTE_DF /;"	d
ATTRIBUTE_DDF	include/Constants.h	/^#define ATTRIBUTE_DDF /;"	d
ATTRIBUTE_DDF_IND	include/Constants.h	/^#define ATTRIBUTE_DDF_IND /;"	d
ATTRIBUTE_FIT_H	include/Constants.h	/^#define ATTRIBUTE_FIT_H /;"	d
ATTRIBUTE_ALG_H	include/Constants.h	/^#define ATTRIBUTE_ALG_H /;"	d
ATTRIBUTE_FIT_T	include/Constants.h	/^#define ATTRIBUTE_FIT_T /;"	d
ATTRIBUTE_ALG_T	include/Constants.h	/^#define ATTRIBUTE_ALG_T /;"	d
ATTRIBUTE_LOOPS	include/Constants.h	/^#define ATTRIBUTE_LOOPS /;"	d
ATTRIBUTE_EXPLAINED_I	include/Constants.h	/^#define ATTRIBUTE_EXPLAINED_I /;"	d
ATTRIBUTE_AIC	include/Constants.h	/^#define ATTRIBUTE_AIC /;"	d
ATTRIBUTE_BIC	include/Constants.h	/^#define ATTRIBUTE_BIC /;"	d
ATTRIBUTE_BP_AIC	include/Constants.h	/^#define ATTRIBUTE_BP_AIC /;"	d
ATTRIBUTE_BP_BIC	include/Constants.h	/^#define ATTRIBUTE_BP_BIC /;"	d
ATTRIBUTE_UNEXPLAINED_I	include/Constants.h	/^#define ATTRIBUTE_UNEXPLAINED_I /;"	d
ATTRIBUTE_T_FROM_H	include/Constants.h	/^#define ATTRIBUTE_T_FROM_H /;"	d
ATTRIBUTE_IPF_ITERATIONS	include/Constants.h	/^#define ATTRIBUTE_IPF_ITERATIONS /;"	d
ATTRIBUTE_IPF_ERROR	include/Constants.h	/^#define ATTRIBUTE_IPF_ERROR /;"	d
ATTRIBUTE_PROCESSED	include/Constants.h	/^#define ATTRIBUTE_PROCESSED /;"	d
ATTRIBUTE_IND_H	include/Constants.h	/^#define ATTRIBUTE_IND_H /;"	d
ATTRIBUTE_DEP_H	include/Constants.h	/^#define ATTRIBUTE_DEP_H /;"	d
ATTRIBUTE_COND_H	include/Constants.h	/^#define ATTRIBUTE_COND_H /;"	d
ATTRIBUTE_COND_DH	include/Constants.h	/^#define ATTRIBUTE_COND_DH /;"	d
ATTRIBUTE_COND_PCT_DH	include/Constants.h	/^#define ATTRIBUTE_COND_PCT_DH /;"	d
ATTRIBUTE_COND_DF	include/Constants.h	/^#define ATTRIBUTE_COND_DF /;"	d
ATTRIBUTE_COND_DDF	include/Constants.h	/^#define ATTRIBUTE_COND_DDF /;"	d
ATTRIBUTE_TOTAL_LR	include/Constants.h	/^#define ATTRIBUTE_TOTAL_LR /;"	d
ATTRIBUTE_IND_LR	include/Constants.h	/^#define ATTRIBUTE_IND_LR /;"	d
ATTRIBUTE_COND_LR	include/Constants.h	/^#define ATTRIBUTE_COND_LR /;"	d
ATTRIBUTE_COND_H_PROB	include/Constants.h	/^#define ATTRIBUTE_COND_H_PROB /;"	d
ATTRIBUTE_P2	include/Constants.h	/^#define ATTRIBUTE_P2 /;"	d
ATTRIBUTE_P2_IND	include/Constants.h	/^#define ATTRIBUTE_P2_IND /;"	d
ATTRIBUTE_P2_ALPHA_IND	include/Constants.h	/^#define ATTRIBUTE_P2_ALPHA_IND /;"	d
ATTRIBUTE_P2_BETA_IND	include/Constants.h	/^#define ATTRIBUTE_P2_BETA_IND /;"	d
ATTRIBUTE_P2_ALPHA_SAT	include/Constants.h	/^#define ATTRIBUTE_P2_ALPHA_SAT /;"	d
ATTRIBUTE_P2_BETA_SAT	include/Constants.h	/^#define ATTRIBUTE_P2_BETA_SAT /;"	d
ATTRIBUTE_P2_ALPHA	include/Constants.h	/^#define ATTRIBUTE_P2_ALPHA /;"	d
ATTRIBUTE_P2_BETA	include/Constants.h	/^#define ATTRIBUTE_P2_BETA /;"	d
ATTRIBUTE_LR	include/Constants.h	/^#define ATTRIBUTE_LR /;"	d
ATTRIBUTE_LR_IND	include/Constants.h	/^#define ATTRIBUTE_LR_IND /;"	d
ATTRIBUTE_ALPHA_IND	include/Constants.h	/^#define ATTRIBUTE_ALPHA_IND /;"	d
ATTRIBUTE_BETA_IND	include/Constants.h	/^#define ATTRIBUTE_BETA_IND /;"	d
ATTRIBUTE_ALPHA_SAT	include/Constants.h	/^#define ATTRIBUTE_ALPHA_SAT /;"	d
ATTRIBUTE_BETA_SAT	include/Constants.h	/^#define ATTRIBUTE_BETA_SAT /;"	d
ATTRIBUTE_ALPHA	include/Constants.h	/^#define ATTRIBUTE_ALPHA /;"	d
ATTRIBUTE_BETA	include/Constants.h	/^#define ATTRIBUTE_BETA /;"	d
ATTRIBUTE_INCR_ALPHA	include/Constants.h	/^#define ATTRIBUTE_INCR_ALPHA /;"	d
ATTRIBUTE_INCR_ALPHA_REACHABLE	include/Constants.h	/^#define ATTRIBUTE_INCR_ALPHA_REACHABLE /;"	d
ATTRIBUTE_PROG_ID	include/Constants.h	/^#define ATTRIBUTE_PROG_ID /;"	d
ATTRIBUTE_MAX_REL_WIDTH	include/Constants.h	/^#define ATTRIBUTE_MAX_REL_WIDTH /;"	d
ATTRIBUTE_MIN_REL_WIDTH	include/Constants.h	/^#define ATTRIBUTE_MIN_REL_WIDTH /;"	d
ATTRIBUTE_BP_T	include/Constants.h	/^#define ATTRIBUTE_BP_T /;"	d
ATTRIBUTE_BP_H	include/Constants.h	/^#define ATTRIBUTE_BP_H /;"	d
ATTRIBUTE_BP_LR	include/Constants.h	/^#define ATTRIBUTE_BP_LR /;"	d
ATTRIBUTE_BP_ALPHA	include/Constants.h	/^#define ATTRIBUTE_BP_ALPHA /;"	d
ATTRIBUTE_BP_BETA	include/Constants.h	/^#define ATTRIBUTE_BP_BETA /;"	d
ATTRIBUTE_BP_EXPLAINED_I	include/Constants.h	/^#define ATTRIBUTE_BP_EXPLAINED_I /;"	d
ATTRIBUTE_BP_UNEXPLAINED_I	include/Constants.h	/^#define ATTRIBUTE_BP_UNEXPLAINED_I /;"	d
ATTRIBUTE_BP_COND_H	include/Constants.h	/^#define ATTRIBUTE_BP_COND_H /;"	d
ATTRIBUTE_BP_COND_DH	include/Constants.h	/^#define ATTRIBUTE_BP_COND_DH /;"	d
ATTRIBUTE_BP_COND_PCT_DH	include/Constants.h	/^#define ATTRIBUTE_BP_COND_PCT_DH /;"	d
ATTRIBUTE_PCT_CORRECT_DATA	include/Constants.h	/^#define ATTRIBUTE_PCT_CORRECT_DATA /;"	d
ATTRIBUTE_PCT_COVERAGE	include/Constants.h	/^#define ATTRIBUTE_PCT_COVERAGE /;"	d
ATTRIBUTE_PCT_CORRECT_TEST	include/Constants.h	/^#define ATTRIBUTE_PCT_CORRECT_TEST /;"	d
ATTRIBUTE_PCT_MISSED_TEST	include/Constants.h	/^#define ATTRIBUTE_PCT_MISSED_TEST /;"	d
___ManagerBase	include/ManagerBase.h	/^#define ___ManagerBase$/;"	d
ocIntersectProcessor	include/ManagerBase.h	/^class ocIntersectProcessor {$/;"	c
ocIntersectProcessor	include/ManagerBase.h	/^        ocIntersectProcessor() {$/;"	f	class:ocIntersectProcessor
~ocIntersectProcessor	include/ManagerBase.h	/^        virtual ~ocIntersectProcessor() {$/;"	f	class:ocIntersectProcessor
FitIntersectMap	include/ManagerBase.h	/^typedef map<Relation*, long long> FitIntersectMap;$/;"	t
ManagerBase	include/ManagerBase.h	/^class ManagerBase {$/;"	c
HMethod	include/ManagerBase.h	/^        enum HMethod {$/;"	g	class:ManagerBase
AUTO	include/ManagerBase.h	/^            AUTO, IPF, ALGEBRAIC$/;"	e	enum:ManagerBase::HMethod
IPF	include/ManagerBase.h	/^            AUTO, IPF, ALGEBRAIC$/;"	e	enum:ManagerBase::HMethod
ALGEBRAIC	include/ManagerBase.h	/^            AUTO, IPF, ALGEBRAIC$/;"	e	enum:ManagerBase::HMethod
getSearchDirection	include/ManagerBase.h	/^        Direction getSearchDirection() { return searchDirection; }$/;"	f	class:ManagerBase
getTopRefModel	include/ManagerBase.h	/^        virtual Model *getTopRefModel() {$/;"	f	class:ManagerBase
getBottomRefModel	include/ManagerBase.h	/^        virtual Model *getBottomRefModel() {$/;"	f	class:ManagerBase
getRefModel	include/ManagerBase.h	/^        virtual Model *getRefModel() {$/;"	f	class:ManagerBase
getUseInverseNotation	include/ManagerBase.h	/^        virtual int getUseInverseNotation() {$/;"	f	class:ManagerBase
getValuesAreFunctions	include/ManagerBase.h	/^        bool getValuesAreFunctions() {$/;"	f	class:ManagerBase
getFunctionConstant	include/ManagerBase.h	/^        double getFunctionConstant() {$/;"	f	class:ManagerBase
getNegativeConstant	include/ManagerBase.h	/^        double getNegativeConstant() {$/;"	f	class:ManagerBase
getKeySize	include/ManagerBase.h	/^        int getKeySize() {$/;"	f	class:ManagerBase
getSampleSz	include/ManagerBase.h	/^        double getSampleSz() {$/;"	f	class:ManagerBase
getTestSampleSize	include/ManagerBase.h	/^        double getTestSampleSize() {$/;"	f	class:ManagerBase
getVariableList	include/ManagerBase.h	/^        VariableList *getVariableList() {$/;"	f	class:ManagerBase
getRelCache	include/ManagerBase.h	/^        class RelCache *getRelCache() {$/;"	f	class:ManagerBase
getModelCache	include/ManagerBase.h	/^        class ModelCache *getModelCache() {$/;"	f	class:ManagerBase
getInputData	include/ManagerBase.h	/^        class Table *getInputData() {$/;"	f	class:ManagerBase
getTestData	include/ManagerBase.h	/^        class Table *getTestData() {$/;"	f	class:ManagerBase
setOptionString	include/ManagerBase.h	/^        bool setOptionString(ocOptionDef *def, const char *value) {$/;"	f	class:ManagerBase
setOptionFloat	include/ManagerBase.h	/^        bool setOptionFloat(ocOptionDef *def, double nvalue) {$/;"	f	class:ManagerBase
getOptionString	include/ManagerBase.h	/^        bool getOptionString(const char *name, void **next, const char **value) {$/;"	f	class:ManagerBase
getOptionFloat	include/ManagerBase.h	/^        bool getOptionFloat(const char *name, void **next, double *nvalue) {$/;"	f	class:ManagerBase
getFitTable	include/ManagerBase.h	/^        class Table *getFitTable() {$/;"	f	class:ManagerBase
alpha_threshold	include/ManagerBase.h	/^        double alpha_threshold = 0.05;$/;"	m	class:ManagerBase
topRef	include/ManagerBase.h	/^        Model *topRef;$/;"	m	class:ManagerBase
bottomRef	include/ManagerBase.h	/^        Model *bottomRef;$/;"	m	class:ManagerBase
refModel	include/ManagerBase.h	/^        Model *refModel;$/;"	m	class:ManagerBase
varList	include/ManagerBase.h	/^        VariableList *varList;$/;"	m	class:ManagerBase
keysize	include/ManagerBase.h	/^        int keysize;$/;"	m	class:ManagerBase
sampleSize	include/ManagerBase.h	/^        double sampleSize;$/;"	m	class:ManagerBase
testSampleSize	include/ManagerBase.h	/^        double testSampleSize;$/;"	m	class:ManagerBase
stateSpaceSize	include/ManagerBase.h	/^        unsigned long long stateSpaceSize;$/;"	m	class:ManagerBase
inputData	include/ManagerBase.h	/^        Table *inputData;$/;"	m	class:ManagerBase
testData	include/ManagerBase.h	/^        Table *testData;$/;"	m	class:ManagerBase
inputH	include/ManagerBase.h	/^        double inputH;$/;"	m	class:ManagerBase
relCache	include/ManagerBase.h	/^        class RelCache *relCache;$/;"	m	class:ManagerBase	typeref:class:ManagerBase::RelCache
modelCache	include/ManagerBase.h	/^        class ModelCache *modelCache;$/;"	m	class:ManagerBase	typeref:class:ManagerBase::ModelCache
options	include/ManagerBase.h	/^        class Options *options;$/;"	m	class:ManagerBase	typeref:class:ManagerBase::Options
fitTable1	include/ManagerBase.h	/^        Table *fitTable1;$/;"	m	class:ManagerBase
fitTable2	include/ManagerBase.h	/^        Table *fitTable2;$/;"	m	class:ManagerBase
projTable	include/ManagerBase.h	/^        Table *projTable;$/;"	m	class:ManagerBase
dataLines	include/ManagerBase.h	/^        int dataLines;$/;"	m	class:ManagerBase
DVOrder	include/ManagerBase.h	/^        int *DVOrder;$/;"	m	class:ManagerBase
useInverseNotation	include/ManagerBase.h	/^        int useInverseNotation;$/;"	m	class:ManagerBase
intersectArray	include/ManagerBase.h	/^        VarIntersect *intersectArray;$/;"	m	class:ManagerBase
intersectCount	include/ManagerBase.h	/^        int intersectCount;$/;"	m	class:ManagerBase
intersectMax	include/ManagerBase.h	/^        int intersectMax;$/;"	m	class:ManagerBase
functionConstant	include/ManagerBase.h	/^        double functionConstant;$/;"	m	class:ManagerBase
negativeConstant	include/ManagerBase.h	/^        double negativeConstant;$/;"	m	class:ManagerBase
valuesAreFunctions	include/ManagerBase.h	/^        bool valuesAreFunctions;$/;"	m	class:ManagerBase
searchDirection	include/ManagerBase.h	/^        Direction searchDirection;$/;"	m	class:ManagerBase
___VarIntersect	include/VarIntersect.h	/^#define ___VarIntersect$/;"	d
VarIntersect	include/VarIntersect.h	/^struct VarIntersect {$/;"	s
startIndex	include/VarIntersect.h	/^        int startIndex; \/\/ the highest numbered relation index this intersection term represents$/;"	m	struct:VarIntersect
rel	include/VarIntersect.h	/^        Relation *rel;$/;"	m	struct:VarIntersect
sign	include/VarIntersect.h	/^        bool sign;$/;"	m	struct:VarIntersect
count	include/VarIntersect.h	/^        int count;$/;"	m	struct:VarIntersect
VarIntersect	include/VarIntersect.h	/^        VarIntersect() :$/;"	f	struct:VarIntersect
___Report	include/Report.h	/^#define ___Report$/;"	d
equals_sign	include/Report.h	/^constexpr const char* equals_sign(bool html) {$/;"	f
not_equals_sign	include/Report.h	/^constexpr const char* not_equals_sign(bool html) { $/;"	f
dv_Data	include/Report.h	/^class dv_Data{$/;"	c
key	include/Report.h	/^    KeySegment **key;$/;"	m	class:dv_Data
dv_value	include/Report.h	/^    char **dv_value;$/;"	m	class:dv_Data
cdv_value	include/Report.h	/^    double **cdv_value;$/;"	m	class:dv_Data
t_freq	include/Report.h	/^    double *t_freq;$/;"	m	class:dv_Data
dv_freq	include/Report.h	/^    int *dv_freq;$/;"	m	class:dv_Data
num_correct	include/Report.h	/^    double *num_correct;$/;"	m	class:dv_Data
percent_correct	include/Report.h	/^    double *percent_correct;$/;"	m	class:dv_Data
rule_index	include/Report.h	/^    int *rule_index;$/;"	m	class:dv_Data
Report	include/Report.h	/^class Report {$/;"	c
bestModelName	include/Report.h	/^    const char* bestModelName() { return models[0]->getPrintName(); }$/;"	f	class:Report
setSeparator	include/Report.h	/^	void setSeparator(int sep) { separator = sep; }$/;"	f	class:Report
isHTMLMode	include/Report.h	/^	static bool isHTMLMode() {return htmlMode; }$/;"	f	class:Report
setHTMLMode	include/Report.h	/^	static void setHTMLMode(bool mode) { htmlMode = mode; }$/;"	f	class:Report
maxNameLength	include/Report.h	/^    static int maxNameLength;$/;"	m	class:Report
manager	include/Report.h	/^    class ManagerBase *manager;$/;"	m	class:Report	typeref:class:Report::ManagerBase
htmlMode	include/Report.h	/^	static bool htmlMode;$/;"	m	class:Report
models	include/Report.h	/^	Model **models;$/;"	m	class:Report
defaultFitModel	include/Report.h	/^	Model *defaultFitModel;$/;"	m	class:Report
attrs	include/Report.h	/^	char **attrs;$/;"	m	class:Report
modelCount	include/Report.h	/^	long modelCount, maxModelCount;$/;"	m	class:Report
maxModelCount	include/Report.h	/^	long modelCount, maxModelCount;$/;"	m	class:Report
attrCount	include/Report.h	/^	long attrCount;$/;"	m	class:Report
separator	include/Report.h	/^	int separator;$/;"	m	class:Report
___Model	include/Model.h	/^#define ___Model$/;"	d
Model	include/Model.h	/^class Model {$/;"	c
getAttributeList	include/Model.h	/^        class AttributeList *getAttributeList() {$/;"	f	class:Model
getHashNext	include/Model.h	/^        Model *getHashNext() {$/;"	f	class:Model
setHashNext	include/Model.h	/^        void setHashNext(Model *next) {$/;"	f	class:Model
getProgenitor	include/Model.h	/^        Model *getProgenitor() {$/;"	f	class:Model
setProgenitor	include/Model.h	/^        void setProgenitor(Model *model) {$/;"	f	class:Model
getID	include/Model.h	/^        int getID() {$/;"	f	class:Model
setID	include/Model.h	/^        void setID(int number) {$/;"	f	class:Model
relations	include/Model.h	/^        Relation **relations;$/;"	m	class:Model
progenitor	include/Model.h	/^        Model *progenitor; \/\/ the model from which this one was derived in a search$/;"	m	class:Model
ID	include/Model.h	/^        int ID; \/\/ ID of the model in a search list$/;"	m	class:Model
relationCount	include/Model.h	/^        int relationCount;$/;"	m	class:Model
maxRelationCount	include/Model.h	/^        int maxRelationCount;$/;"	m	class:Model
fitTable	include/Model.h	/^        class Table *fitTable;$/;"	m	class:Model	typeref:class:Model::Table
attributeList	include/Model.h	/^        class AttributeList *attributeList;$/;"	m	class:Model	typeref:class:Model::AttributeList
hashNext	include/Model.h	/^        Model *hashNext;$/;"	m	class:Model
printName	include/Model.h	/^        char *printName;$/;"	m	class:Model
inverseName	include/Model.h	/^        char *inverseName;$/;"	m	class:Model
structMatrix	include/Model.h	/^        int **structMatrix;$/;"	m	class:Model
totalConstraints	include/Model.h	/^        long totalConstraints;$/;"	m	class:Model
stateSpaceSize	include/Model.h	/^        int stateSpaceSize;$/;"	m	class:Model
___Math	include/Math.h	/^#define ___Math$/;"	d
___Table	include/Table.h	/^#define ___Table$/;"	d
Table	include/Table.h	/^class Table {$/;"	c
getTupleCount	include/Table.h	/^        long long getTupleCount() {$/;"	f	class:Table
getKeySize	include/Table.h	/^        int getKeySize() {$/;"	f	class:Table
data	include/Table.h	/^        void* data; \/\/ storage for all keys and values$/;"	m	class:Table
keysize	include/Table.h	/^        int keysize; \/\/ number of key segments in the key for each tuple$/;"	m	class:Table
tupleCount	include/Table.h	/^        long long tupleCount; \/\/ number of tuples in the tuple array$/;"	m	class:Table
maxTupleCount	include/Table.h	/^        long long maxTupleCount; \/\/ the total size of the data member, in terms of tuples$/;"	m	class:Table
type	include/Table.h	/^        TableType type; \/\/ one of INFO_TYPE, SET_TYPE$/;"	m	class:Table
tableIteration	include/Table.h	/^void tableIteration(Table* input_table, VariableList* varlist, Relation* rel,$/;"	f
tableKVIteration	include/Table.h	/^void tableKVIteration(Table* table, VariableList* varlist, long var_count, F action) {$/;"	f
___Core	include/_Core.h	/^#define ___Core$/;"	d
fmax	include/_Core.h	/^#define fmax(/;"	d
growStorage	include/_Core.h	/^#define growStorage(/;"	d
___Search	include/Search.h	/^#define ___Search$/;"	d
SearchFullDown	include/Search.h	/^class SearchFullDown : public SearchBase {$/;"	c
SearchFullDown	include/Search.h	/^	SearchFullDown() {};$/;"	f	class:SearchFullDown
~SearchFullDown	include/Search.h	/^	virtual ~SearchFullDown() {};$/;"	f	class:SearchFullDown
make	include/Search.h	/^	static SearchBase *make() { return new SearchFullDown(); }$/;"	f	class:SearchFullDown
SearchFullUp	include/Search.h	/^class SearchFullUp : public SearchBase {$/;"	c
SearchFullUp	include/Search.h	/^	SearchFullUp(): parentList(0), parentListCount(0), parentListMax(0) {};$/;"	f	class:SearchFullUp
~SearchFullUp	include/Search.h	/^	virtual ~SearchFullUp() {};$/;"	f	class:SearchFullUp
make	include/Search.h	/^	static SearchBase *make() { return new SearchFullUp(); }$/;"	f	class:SearchFullUp
parentList	include/Search.h	/^	Model **parentList;$/;"	m	class:SearchFullUp
parentListCount	include/Search.h	/^	long parentListCount;$/;"	m	class:SearchFullUp
parentListMax	include/Search.h	/^	long parentListMax;$/;"	m	class:SearchFullUp
SearchLooplessDown	include/Search.h	/^class SearchLooplessDown : public SearchBase {$/;"	c
SearchLooplessDown	include/Search.h	/^	SearchLooplessDown() {};$/;"	f	class:SearchLooplessDown
~SearchLooplessDown	include/Search.h	/^	virtual ~SearchLooplessDown() {};$/;"	f	class:SearchLooplessDown
make	include/Search.h	/^	static SearchBase *make() { return new SearchLooplessDown(); }$/;"	f	class:SearchLooplessDown
SearchSbFullUp	include/Search.h	/^class SearchSbFullUp : public SearchBase {$/;"	c
SearchSbFullUp	include/Search.h	/^	SearchSbFullUp() {};$/;"	f	class:SearchSbFullUp
~SearchSbFullUp	include/Search.h	/^	virtual ~SearchSbFullUp() {};$/;"	f	class:SearchSbFullUp
make	include/Search.h	/^	static SearchBase *make() { return new SearchSbFullUp(); }$/;"	f	class:SearchSbFullUp
SearchSbLooplessUp	include/Search.h	/^class SearchSbLooplessUp : public SearchBase {$/;"	c
SearchSbLooplessUp	include/Search.h	/^	SearchSbLooplessUp() {};$/;"	f	class:SearchSbLooplessUp
~SearchSbLooplessUp	include/Search.h	/^	virtual ~SearchSbLooplessUp() {};$/;"	f	class:SearchSbLooplessUp
make	include/Search.h	/^	static SearchBase *make() { return new SearchSbLooplessUp(); }$/;"	f	class:SearchSbLooplessUp
SearchLooplessUp	include/Search.h	/^class SearchLooplessUp : public SearchBase {$/;"	c
SearchLooplessUp	include/Search.h	/^	SearchLooplessUp() {};$/;"	f	class:SearchLooplessUp
~SearchLooplessUp	include/Search.h	/^	virtual ~SearchLooplessUp() {};$/;"	f	class:SearchLooplessUp
make	include/Search.h	/^	static SearchBase *make() { return new SearchLooplessUp(); }$/;"	f	class:SearchLooplessUp
SearchDisjointUp	include/Search.h	/^class SearchDisjointUp : public SearchBase {$/;"	c
SearchDisjointUp	include/Search.h	/^	SearchDisjointUp() {};$/;"	f	class:SearchDisjointUp
~SearchDisjointUp	include/Search.h	/^	virtual ~SearchDisjointUp() {};$/;"	f	class:SearchDisjointUp
make	include/Search.h	/^	static SearchBase *make() { return new SearchDisjointUp(); }$/;"	f	class:SearchDisjointUp
SearchDisjointDown	include/Search.h	/^class SearchDisjointDown : public SearchBase {$/;"	c
make	include/Search.h	/^	static SearchBase *make() { return new SearchDisjointDown();}$/;"	f	class:SearchDisjointDown
SearchChain	include/Search.h	/^class SearchChain : public SearchBase {$/;"	c
SearchChain	include/Search.h	/^	SearchChain() {};$/;"	f	class:SearchChain
~SearchChain	include/Search.h	/^	virtual ~SearchChain() {};$/;"	f	class:SearchChain
make	include/Search.h	/^	static SearchBase *make() { return new SearchChain(); }$/;"	f	class:SearchChain
varCount	include/Search.h	/^	int varCount;	\/\/ variables in model$/;"	m	class:SearchChain
slot	include/Search.h	/^	int slot;		\/\/ next position in models$/;"	m	class:SearchChain
maxChildren	include/Search.h	/^	int maxChildren; \/\/size of models array, precomputed$/;"	m	class:SearchChain
models	include/Search.h	/^	Model **models; \/\/ place to put generated models$/;"	m	class:SearchChain
varStack	include/Search.h	/^	int *varStack; \/\/ stack of variables for recursion$/;"	m	class:SearchChain
stackPtr	include/Search.h	/^	int stackPtr;	\/\/ current position in varStack$/;"	m	class:SearchChain
depVar	include/Search.h	/^	int depVar;		\/\/ index of the dependent variable, -1 for neutral systems$/;"	m	class:SearchChain
indOnlyRel	include/Search.h	/^	Relation *indOnlyRel; \/\/ index of IV relation, -1 for neutral systems$/;"	m	class:SearchChain
isDirected	include/Search.h	/^	bool isDirected;$/;"	m	class:SearchChain
___RelationCache	include/RelCache.h	/^#define ___RelationCache$/;"	d
RELCACHE_HASHSIZE	include/RelCache.h	/^#define RELCACHE_HASHSIZE /;"	d
RelCache	include/RelCache.h	/^class RelCache {$/;"	c
hash	include/RelCache.h	/^	class Relation **hash;$/;"	m	class:RelCache	typeref:class:RelCache::Relation
SBMManager	cpp/SBMManager.cpp	/^SBMManager::SBMManager(VariableList *vars, Table *input) :$/;"	f	class:SBMManager
SBMManager	cpp/SBMManager.cpp	/^SBMManager::SBMManager() :$/;"	f	class:SBMManager
~SBMManager	cpp/SBMManager.cpp	/^SBMManager::~SBMManager() {$/;"	f	class:SBMManager
initFromCommandLine	cpp/SBMManager.cpp	/^bool SBMManager::initFromCommandLine(int argc, char **argv) {$/;"	f	class:SBMManager
verifyStateBasedNaming	cpp/SBMManager.cpp	/^void SBMManager::verifyStateBasedNaming() {$/;"	f	class:SBMManager
makeReferenceModels	cpp/SBMManager.cpp	/^void SBMManager::makeReferenceModels(Relation *top) {$/;"	f	class:SBMManager
setRefModel	cpp/SBMManager.cpp	/^Model *SBMManager::setRefModel(const char *name) {$/;"	f	class:SBMManager
computeExplainedInformation	cpp/SBMManager.cpp	/^double SBMManager::computeExplainedInformation(Model *model) {$/;"	f	class:SBMManager
computeUnexplainedInformation	cpp/SBMManager.cpp	/^double SBMManager::computeUnexplainedInformation(Model *model) {$/;"	f	class:SBMManager
computeDDF	cpp/SBMManager.cpp	/^double SBMManager::computeDDF(Model *model) {$/;"	f	class:SBMManager
setSearch	cpp/SBMManager.cpp	/^void SBMManager::setSearch(const char *name) {$/;"	f	class:SBMManager
computeDFStatistics	cpp/SBMManager.cpp	/^void SBMManager::computeDFStatistics(Model *model) {$/;"	f	class:SBMManager
computeInformationStatistics	cpp/SBMManager.cpp	/^void SBMManager::computeInformationStatistics(Model *model) {$/;"	f	class:SBMManager
computeL2Statistics	cpp/SBMManager.cpp	/^void SBMManager::computeL2Statistics(Model *model) {$/;"	f	class:SBMManager
computePearsonStatistics	cpp/SBMManager.cpp	/^void SBMManager::computePearsonStatistics(Model *model) {$/;"	f	class:SBMManager
computeDependentStatistics	cpp/SBMManager.cpp	/^void SBMManager::computeDependentStatistics(Model *model) {$/;"	f	class:SBMManager
computeBPStatistics	cpp/SBMManager.cpp	/^void SBMManager::computeBPStatistics(Model *model) {$/;"	f	class:SBMManager
computePercentCorrect	cpp/SBMManager.cpp	/^void SBMManager::computePercentCorrect(Model *model) {$/;"	f	class:SBMManager
setFilter	cpp/SBMManager.cpp	/^void SBMManager::setFilter(const char *attrname, double attrvalue, RelOp op) {$/;"	f	class:SBMManager
applyFilter	cpp/SBMManager.cpp	/^bool SBMManager::applyFilter(Model *model) {$/;"	f	class:SBMManager
setSortAttr	cpp/SBMManager.cpp	/^void SBMManager::setSortAttr(const char *name) {$/;"	f	class:SBMManager
printRefTable	cpp/SBMManager.cpp	/^static void printRefTable(Model *model, FILE *fd, const char *ref, const char **strings,$/;"	f	file:
printFitReport	cpp/SBMManager.cpp	/^void SBMManager::printFitReport(Model *model, FILE *fd) {$/;"	f	class:SBMManager
printBasicStatistics	cpp/SBMManager.cpp	/^void SBMManager::printBasicStatistics() {$/;"	f	class:SBMManager
LostVar	cpp/Input.cpp	/^struct LostVar {$/;"	s	file:
num	cpp/Input.cpp	/^        int num;$/;"	m	struct:LostVar	file:
ValidList	cpp/Input.cpp	/^        char * ValidList[MAXCARDINALITY];$/;"	m	struct:LostVar	file:
all	cpp/Input.cpp	/^        int all; \/\/flag to mark if all values are valid$/;"	m	struct:LostVar	file:
next	cpp/Input.cpp	/^        LostVar *next;$/;"	m	struct:LostVar	file:
isLostVar	cpp/Input.cpp	/^bool isLostVar(int i, LostVar ** varp, LostVar *lostvarp) {$/;"	f
KeepVal	cpp/Input.cpp	/^bool KeepVal(LostVar *lostvarpt, char * var) {$/;"	f
ocReadData	cpp/Input.cpp	/^long ocReadData(FILE *fin, VariableList *vars, Table *indata, LostVar *lostvarp) {$/;"	f
ocDefineVariables	cpp/Input.cpp	/^void ocDefineVariables(Options *options, VariableList *vars) {$/;"	f
ocRebinDefineVar	cpp/Input.cpp	/^void ocRebinDefineVar(Options *options, VariableList *vars, LostVar ** lostvarp) {$/;"	f
ocReadFile	cpp/Input.cpp	/^int ocReadFile(FILE *fd, Options *options, Table **indata, Table **testdata, VariableList **vars) {$/;"	f
attrDescCount	cpp/Report.cpp	/^int attrDescCount = sizeof(attrDescriptions) \/ sizeof(attrDesc);$/;"	v
htmlMode	cpp/Report.cpp	/^bool Report::htmlMode = false;$/;"	m	class:Report	file:
maxNameLength	cpp/Report.cpp	/^int Report::maxNameLength;$/;"	m	class:Report	file:
Report	cpp/Report.cpp	/^Report::Report(class ManagerBase *mgr) {$/;"	f	class:Report
~Report	cpp/Report.cpp	/^Report::~Report() {$/;"	f	class:Report
addModel	cpp/Report.cpp	/^void Report::addModel(class Model *model) {$/;"	f	class:Report
setDefaultFitModel	cpp/Report.cpp	/^void Report::setDefaultFitModel(class Model *model) {$/;"	f	class:Report
setAttributes	cpp/Report.cpp	/^void Report::setAttributes(const char *attrlist) {$/;"	f	class:Report
sort	cpp/Report.cpp	/^void Report::sort(const char *attr, Direction dir) {$/;"	f	class:Report
sort	cpp/Report.cpp	/^void Report::sort(class Model** models, long modelCount, const char *attr, Direction dir) {$/;"	f	class:Report
print	cpp/Report.cpp	/^void Report::print(FILE *fd) {$/;"	f	class:Report
printSearchHeader	cpp/Report.cpp	/^void Report::printSearchHeader(FILE *fd, int* attrID) {$/;"	f	class:Report
printSearchRow	cpp/Report.cpp	/^void Report::printSearchRow(FILE *fd, Model* model, int* attrID, bool isOddRow) {$/;"	f	class:Report
print	cpp/Report.cpp	/^void Report::print(int fd) {$/;"	f	class:Report
printd	cpp/Report.cpp	/^void printd(double d) {$/;"	f
printConfusionMatrixHTML	cpp/Report.cpp	/^void printConfusionMatrixHTML(const char* dv_name, const char* dv_target, double tp, double fp, double tn, double fn) {$/;"	f
printConfusionMatrixStatsHTML	cpp/Report.cpp	/^void printConfusionMatrixStatsHTML(const char* dv_name, const char* dv_target, double tp, double fp, double tn, double fn) {$/;"	f
printConfusionMatrixCSV	cpp/Report.cpp	/^void printConfusionMatrixCSV(const char* dv_name, const char* dv_target, double tp, double fp, double tn, double fn) {$/;"	f
printConfusionMatrixStatsCSV	cpp/Report.cpp	/^void printConfusionMatrixStatsCSV(const char* dv_name, const char* dv_target, double tp, double fp, double tn, double fn) {$/;"	f
printConfusionMatrix	cpp/Report.cpp	/^void Report::printConfusionMatrix(Model* model, Relation* rel, $/;"	f	class:Report
GROWTH_FACTOR	cpp/Table.cpp	/^const long long GROWTH_FACTOR = 2;$/;"	v
TupleBytes	cpp/Table.cpp	/^#define TupleBytes /;"	d	file:
ValuePtr	cpp/Table.cpp	/^static ocTupleValue *ValuePtr(void *data, int keysize, long long index)$/;"	f	file:
KeyPtr	cpp/Table.cpp	/^static KeySegment *KeyPtr(void *data, int keysize, long long index)$/;"	f	file:
Table	cpp/Table.cpp	/^Table::Table(int keysz, long long maxTuples, TableType typ)$/;"	f	class:Table
~Table	cpp/Table.cpp	/^Table::~Table()$/;"	f	class:Table
size	cpp/Table.cpp	/^long long Table::size()$/;"	f	class:Table
copy	cpp/Table.cpp	/^void Table::copy(const Table* from)$/;"	f	class:Table
addTuple	cpp/Table.cpp	/^void Table::addTuple(KeySegment *key, double value)$/;"	f	class:Table
insertTuple	cpp/Table.cpp	/^void Table::insertTuple(KeySegment *key, double value, long long index)$/;"	f	class:Table
sumTuple	cpp/Table.cpp	/^void Table::sumTuple(KeySegment *key, double value)$/;"	f	class:Table
getValue	cpp/Table.cpp	/^double Table::getValue(long long index)$/;"	f	class:Table
setValue	cpp/Table.cpp	/^void Table::setValue(long long index, double value)$/;"	f	class:Table
getKey	cpp/Table.cpp	/^KeySegment *Table::getKey(long long index)$/;"	f	class:Table
copyKey	cpp/Table.cpp	/^void Table::copyKey(long long index, KeySegment *key)$/;"	f	class:Table
indexOf	cpp/Table.cpp	/^long long Table::indexOf(KeySegment *key, bool matchOnly)$/;"	f	class:Table
sortKeySize	cpp/Table.cpp	/^static int sortKeySize;	\/\/ must be set before calling sortCompare$/;"	v	file:
sortCompare	cpp/Table.cpp	/^static int sortCompare(const void *k1, const void *k2)$/;"	f	file:
sort	cpp/Table.cpp	/^void Table::sort()$/;"	f	class:Table
normalize	cpp/Table.cpp	/^double Table::normalize()$/;"	f	class:Table
addConstant	cpp/Table.cpp	/^void Table::addConstant(double constant)$/;"	f	class:Table
getLowestValue	cpp/Table.cpp	/^double Table::getLowestValue()$/;"	f	class:Table
reset	cpp/Table.cpp	/^void Table::reset(int keysize)$/;"	f	class:Table
dump	cpp/Table.cpp	/^void Table::dump(bool detail)$/;"	f	class:Table
hashcode	cpp/RelCache.cpp	/^static int hashcode(const char *name, int hashsize) {$/;"	f	file:
RelCache	cpp/RelCache.cpp	/^RelCache::RelCache() {$/;"	f	class:RelCache
~RelCache	cpp/RelCache.cpp	/^RelCache::~RelCache() {$/;"	f	class:RelCache
size	cpp/RelCache.cpp	/^long RelCache::size() {$/;"	f	class:RelCache
deleteTables	cpp/RelCache.cpp	/^void RelCache::deleteTables() {$/;"	f	class:RelCache
addRelation	cpp/RelCache.cpp	/^bool RelCache::addRelation(class Relation *rel) {$/;"	f	class:RelCache
findRelation	cpp/RelCache.cpp	/^class Relation *RelCache::findRelation(const char *name) {$/;"	f	class:RelCache
dump	cpp/RelCache.cpp	/^void RelCache::dump() {$/;"	f	class:RelCache
SHELL	cpp/Makefile	/^SHELL = \/bin\/sh$/;"	m
CC	cpp/Makefile	/^CC = gcc$/;"	m
CFLAGS	cpp/Makefile	/^CFLAGS = -w -Wall -O3 -fPIC -std=c++11 -I ..\/include -frounding-math -fsignaling-nans -fsigned-zeros -fno-finite-math-only -msse2 -mfpmath=sse$/;"	m
LFLAGS	cpp/Makefile	/^LFLAGS = -shared$/;"	m
AR	cpp/Makefile	/^AR = ar$/;"	m
COMPILE	cpp/Makefile	/^COMPILE = $(CC) $(CFLAGS)$/;"	m
PY_INCLUDE	cpp/Makefile	/^PY_INCLUDE = \/usr\/include\/python2.7$/;"	m
CL	cpp/Makefile	/^CL = occ$/;"	m
RANLIB	cpp/Makefile	/^RANLIB = ranlib$/;"	m
LDFLAGS	cpp/Makefile	/^LDFLAGS = -lm -lstdc++ -lgmp$/;"	m
PY	cpp/Makefile	/^PY = pyoccam.cpp$/;"	m
DYLIB	cpp/Makefile	/^DYLIB = occam.so$/;"	m
LIB	cpp/Makefile	/^LIB = liboccam3.a$/;"	m
LIBOBJECTS	cpp/Makefile	/^LIBOBJECTS = \\$/;"	m
ocEntropy	cpp/Math.cpp	/^double ocEntropy(Table *p) {$/;"	f
ocTransmission	cpp/Math.cpp	/^double ocTransmission(Table *p, Table *q) {$/;"	f
ocPearsonChiSquaredFlat	cpp/Math.cpp	/^double ocPearsonChiSquaredFlat(int card, double* p, double* q, long sampleSize) {$/;"	f
ocPearsonChiSquared	cpp/Math.cpp	/^double ocPearsonChiSquared(Table *p, Table *q, long sampleSize) {$/;"	f
ocDegreesOfFreedom	cpp/Math.cpp	/^double ocDegreesOfFreedom(Relation *rel) {$/;"	f
ocDegreesOfFreedom	cpp/Math.cpp	/^double ocDegreesOfFreedom(VariableList *varList) {$/;"	f
ocDegreesOfFreedom	cpp/Math.cpp	/^double ocDegreesOfFreedom(VariableList *varList, int *variables, int varCount) {$/;"	f
ocHasOverlaps	cpp/Math.cpp	/^bool ocHasOverlaps(Model *model) {$/;"	f
VarList	cpp/Math.cpp	/^struct VarList {$/;"	s	file:
varCount	cpp/Math.cpp	/^        int varCount;$/;"	m	struct:VarList	file:
vars	cpp/Math.cpp	/^        int *vars;$/;"	m	struct:VarList	file:
VarList	cpp/Math.cpp	/^        VarList() :$/;"	f	struct:VarList
~VarList	cpp/Math.cpp	/^        ~VarList() {$/;"	f	struct:VarList
setVars	cpp/Math.cpp	/^        void setVars(int *newVars) {$/;"	f	struct:VarList
VLCopy	cpp/Math.cpp	/^static void VLCopy(VarList &from, VarList &to) {$/;"	f	file:
VLComplement	cpp/Math.cpp	/^static void VLComplement(VarList &v1, VarList &v2) {$/;"	f	file:
VLContains	cpp/Math.cpp	/^static bool VLContains(VarList &v1, VarList &v2) {$/;"	f	file:
isSuperset	cpp/Math.cpp	/^bool isSuperset(bool *first, bool *second, int length) {$/;"	f
ocSbHasLoops	cpp/Math.cpp	/^bool ocSbHasLoops(Model *model) {$/;"	f
ocHasLoops	cpp/Math.cpp	/^bool ocHasLoops(Model *model) {$/;"	f
ocLR	cpp/Math.cpp	/^double ocLR(double sample, double df, double h) {$/;"	f
LnGamma	cpp/Math.cpp	/^double LnGamma(double xx) {$/;"	f
signgam	cpp/Math.cpp	/^int signgam;$/;"	v
CHIC_ITMAX	cpp/Math.cpp	/^#define CHIC_ITMAX /;"	d	file:
CHIC_EPS	cpp/Math.cpp	/^#define CHIC_EPS /;"	d	file:
chic	cpp/Math.cpp	/^double chic(double x2, double df) {$/;"	f
ZERO	cpp/Math.cpp	/^#define ZERO /;"	d	file:
ONE	cpp/Math.cpp	/^#define ONE /;"	d	file:
TWO	cpp/Math.cpp	/^#define TWO /;"	d	file:
THIRD	cpp/Math.cpp	/^#define THIRD /;"	d	file:
NINE	cpp/Math.cpp	/^#define NINE /;"	d	file:
PREC	cpp/Math.cpp	/^#define PREC /;"	d	file:
CHIN2_EPS	cpp/Math.cpp	/^#define CHIN2_EPS /;"	d	file:
CHIN2_ITMAX	cpp/Math.cpp	/^#define CHIN2_ITMAX /;"	d	file:
A	cpp/Math.cpp	/^#define A /;"	d	file:
B	cpp/Math.cpp	/^#define B /;"	d	file:
FALSE	cpp/Math.cpp	/^#define FALSE /;"	d	file:
TRUE	cpp/Math.cpp	/^#define TRUE /;"	d	file:
chin2	cpp/Math.cpp	/^double chin2(double x, double df, double theta, int *ifault) {$/;"	f
UFLO	cpp/Math.cpp	/^#define UFLO /;"	d	file:
OFLO	cpp/Math.cpp	/^#define OFLO /;"	d	file:
A	cpp/Math.cpp	/^#define A /;"	d	file:
B	cpp/Math.cpp	/^#define B /;"	d	file:
csa	cpp/Math.cpp	/^double csa(double x, double df) {$/;"	f
ZERO	cpp/Math.cpp	/^#define ZERO /;"	d	file:
HALF	cpp/Math.cpp	/^#define HALF /;"	d	file:
ONE	cpp/Math.cpp	/^#define ONE /;"	d	file:
NSPLIT	cpp/Math.cpp	/^#define NSPLIT /;"	d	file:
NA0	cpp/Math.cpp	/^#define NA0 /;"	d	file:
NA1	cpp/Math.cpp	/^#define NA1 /;"	d	file:
NA2	cpp/Math.cpp	/^#define NA2 /;"	d	file:
NA3	cpp/Math.cpp	/^#define NA3 /;"	d	file:
NB1	cpp/Math.cpp	/^#define NB1 /;"	d	file:
NB2	cpp/Math.cpp	/^#define NB2 /;"	d	file:
NB3	cpp/Math.cpp	/^#define NB3 /;"	d	file:
NB4	cpp/Math.cpp	/^#define NB4 /;"	d	file:
NC0	cpp/Math.cpp	/^#define NC0 /;"	d	file:
NC1	cpp/Math.cpp	/^#define NC1 /;"	d	file:
NC2	cpp/Math.cpp	/^#define NC2 /;"	d	file:
NC3	cpp/Math.cpp	/^#define NC3 /;"	d	file:
ND1	cpp/Math.cpp	/^#define ND1 /;"	d	file:
ND2	cpp/Math.cpp	/^#define ND2 /;"	d	file:
ppnorm	cpp/Math.cpp	/^static double ppnorm(double prob, int *ifault) {$/;"	f	file:
E	cpp/Math.cpp	/^#define E /;"	d	file:
gammds	cpp/Math.cpp	/^double gammds(double y, double p, int *ifault) {$/;"	f
PPCHI_EPS	cpp/Math.cpp	/^#define PPCHI_EPS /;"	d	file:
PMIN	cpp/Math.cpp	/^#define PMIN /;"	d	file:
PMAX	cpp/Math.cpp	/^#define PMAX /;"	d	file:
TWO	cpp/Math.cpp	/^#define TWO /;"	d	file:
THREE	cpp/Math.cpp	/^#define THREE /;"	d	file:
SIX	cpp/Math.cpp	/^#define SIX /;"	d	file:
C1	cpp/Math.cpp	/^#define C1 /;"	d	file:
C2	cpp/Math.cpp	/^#define C2 /;"	d	file:
C3	cpp/Math.cpp	/^#define C3 /;"	d	file:
C4	cpp/Math.cpp	/^#define C4 /;"	d	file:
C5	cpp/Math.cpp	/^#define C5 /;"	d	file:
C6	cpp/Math.cpp	/^#define C6 /;"	d	file:
C7	cpp/Math.cpp	/^#define C7 /;"	d	file:
C8	cpp/Math.cpp	/^#define C8 /;"	d	file:
C9	cpp/Math.cpp	/^#define C9 /;"	d	file:
C10	cpp/Math.cpp	/^#define C10 /;"	d	file:
C11	cpp/Math.cpp	/^#define C11 /;"	d	file:
C12	cpp/Math.cpp	/^#define C12 /;"	d	file:
C13	cpp/Math.cpp	/^#define C13 /;"	d	file:
C14	cpp/Math.cpp	/^#define C14 /;"	d	file:
C15	cpp/Math.cpp	/^#define C15 /;"	d	file:
C16	cpp/Math.cpp	/^#define C16 /;"	d	file:
C17	cpp/Math.cpp	/^#define C17 /;"	d	file:
C18	cpp/Math.cpp	/^#define C18 /;"	d	file:
C19	cpp/Math.cpp	/^#define C19 /;"	d	file:
C20	cpp/Math.cpp	/^#define C20 /;"	d	file:
C21	cpp/Math.cpp	/^#define C21 /;"	d	file:
C22	cpp/Math.cpp	/^#define C22 /;"	d	file:
C23	cpp/Math.cpp	/^#define C23 /;"	d	file:
C24	cpp/Math.cpp	/^#define C24 /;"	d	file:
C25	cpp/Math.cpp	/^#define C25 /;"	d	file:
C26	cpp/Math.cpp	/^#define C26 /;"	d	file:
C27	cpp/Math.cpp	/^#define C27 /;"	d	file:
C28	cpp/Math.cpp	/^#define C28 /;"	d	file:
C29	cpp/Math.cpp	/^#define C29 /;"	d	file:
C30	cpp/Math.cpp	/^#define C30 /;"	d	file:
C31	cpp/Math.cpp	/^#define C31 /;"	d	file:
C32	cpp/Math.cpp	/^#define C32 /;"	d	file:
C33	cpp/Math.cpp	/^#define C33 /;"	d	file:
C34	cpp/Math.cpp	/^#define C34 /;"	d	file:
C35	cpp/Math.cpp	/^#define C35 /;"	d	file:
C36	cpp/Math.cpp	/^#define C36 /;"	d	file:
C37	cpp/Math.cpp	/^#define C37 /;"	d	file:
C38	cpp/Math.cpp	/^#define C38 /;"	d	file:
ppchi	cpp/Math.cpp	/^double ppchi(double p, double df, int *ifault) {$/;"	f
LTONE	cpp/Math.cpp	/^#define LTONE /;"	d	file:
UTZERO	cpp/Math.cpp	/^#define UTZERO /;"	d	file:
ZERO	cpp/Math.cpp	/^#define ZERO /;"	d	file:
HALF	cpp/Math.cpp	/^#define HALF /;"	d	file:
ONE	cpp/Math.cpp	/^#define ONE /;"	d	file:
CON	cpp/Math.cpp	/^#define CON /;"	d	file:
A1	cpp/Math.cpp	/^#define A1 /;"	d	file:
A2	cpp/Math.cpp	/^#define A2 /;"	d	file:
A3	cpp/Math.cpp	/^#define A3 /;"	d	file:
A4	cpp/Math.cpp	/^#define A4 /;"	d	file:
A5	cpp/Math.cpp	/^#define A5 /;"	d	file:
A6	cpp/Math.cpp	/^#define A6 /;"	d	file:
A7	cpp/Math.cpp	/^#define A7 /;"	d	file:
B1	cpp/Math.cpp	/^#define B1 /;"	d	file:
B2	cpp/Math.cpp	/^#define B2 /;"	d	file:
B3	cpp/Math.cpp	/^#define B3 /;"	d	file:
B4	cpp/Math.cpp	/^#define B4 /;"	d	file:
B5	cpp/Math.cpp	/^#define B5 /;"	d	file:
B6	cpp/Math.cpp	/^#define B6 /;"	d	file:
B7	cpp/Math.cpp	/^#define B7 /;"	d	file:
B8	cpp/Math.cpp	/^#define B8 /;"	d	file:
B9	cpp/Math.cpp	/^#define B9 /;"	d	file:
B10	cpp/Math.cpp	/^#define B10 /;"	d	file:
B11	cpp/Math.cpp	/^#define B11 /;"	d	file:
B12	cpp/Math.cpp	/^#define B12 /;"	d	file:
anorm	cpp/Math.cpp	/^double anorm(double x, int upper) {$/;"	f
CHISTAT_EPS	cpp/Math.cpp	/^#define CHISTAT_EPS /;"	d	file:
MIN_PROB	cpp/Math.cpp	/^#define MIN_PROB /;"	d	file:
chistat	cpp/Math.cpp	/^unsigned chistat(unsigned ntab, double* obs, double* fit, double* g2_ptr, double* p2_ptr) {$/;"	f
ocDegreesOfFreedomStateBased	cpp/Math.cpp	/^double ocDegreesOfFreedomStateBased(Model *model) {$/;"	f
SearchType	cpp/SearchBase.cpp	/^struct SearchType {$/;"	s	file:
name	cpp/SearchBase.cpp	/^    const char *name;$/;"	m	struct:SearchType	file:
make	cpp/SearchBase.cpp	/^    SearchBase * (*make)();$/;"	m	struct:SearchType	file:
searchTypes	cpp/SearchBase.cpp	/^SearchType searchTypes[] = {$/;"	v
SearchBase	cpp/SearchBase.cpp	/^SearchBase::SearchBase(): manager(0), directed(false)$/;"	f	class:SearchBase
~SearchBase	cpp/SearchBase.cpp	/^SearchBase::~SearchBase()$/;"	f	class:SearchBase
search	cpp/SearchBase.cpp	/^Model **SearchBase::search(Model *start)$/;"	f	class:SearchBase
getSearchMethod	cpp/SearchBase.cpp	/^SearchBase* SearchFactory::getSearchMethod(ManagerBase *mgr, const char *name, bool proj)$/;"	f	class:SearchFactory
LOG_MEMORY	cpp/_Core.cpp	/^#undef LOG_MEMORY$/;"	d	file:
memlog	cpp/_Core.cpp	/^const char *memlog = "memusage.log";$/;"	v
mlogfd	cpp/_Core.cpp	/^static FILE *mlogfd = fopen(memlog, "w");$/;"	v	file:
logMemory	cpp/_Core.cpp	/^void logMemory(void *old, unsigned long long oldSize, long factor, const char *file, long line)$/;"	f
logMemory	cpp/_Core.cpp	/^void logMemory(void *old, unsigned long long oldSize, long factor, const char *file, long line)$/;"	f
_growStorage	cpp/_Core.cpp	/^void *_growStorage(void *old, unsigned long long oldSize, long factor, const char *file, long line)$/;"	f
ocCompareVariables	cpp/_Core.cpp	/^int ocCompareVariables(int varCount1, int *var1, int varCount2, int *var2)$/;"	f
ocContainsVariables	cpp/_Core.cpp	/^bool ocContainsVariables(int varCount1, int *var1, int varCount2, int *var2)$/;"	f
ocContainsStates	cpp/_Core.cpp	/^bool ocContainsStates(int var_count1, int *var1, int *states1, int var_count2, int *var2, int *states2)$/;"	f
hashcode	cpp/ModelCache.cpp	/^static int hashcode(const char *name, int hashsize) {$/;"	f	file:
ModelCache	cpp/ModelCache.cpp	/^ModelCache::ModelCache() {$/;"	f	class:ModelCache
~ModelCache	cpp/ModelCache.cpp	/^ModelCache::~ModelCache() {$/;"	f	class:ModelCache
size	cpp/ModelCache.cpp	/^long ModelCache::size() {$/;"	f	class:ModelCache
addModel	cpp/ModelCache.cpp	/^bool ModelCache::addModel(class Model *model) {$/;"	f	class:ModelCache
deleteModel	cpp/ModelCache.cpp	/^bool ModelCache::deleteModel(class Model *model) {$/;"	f	class:ModelCache
findModel	cpp/ModelCache.cpp	/^class Model *ModelCache::findModel(const char *name) {$/;"	f	class:ModelCache
dump	cpp/ModelCache.cpp	/^void ModelCache::dump() {$/;"	f	class:ModelCache
trim	cpp/Options.cpp	/^static void trim(char *line) {$/;"	f	file:
ocOptionValue	cpp/Options.cpp	/^struct ocOptionValue {$/;"	s	file:
next	cpp/Options.cpp	/^        ocOptionValue *next;$/;"	m	struct:ocOptionValue	file:
value	cpp/Options.cpp	/^        char *value;$/;"	m	struct:ocOptionValue	file:
tip	cpp/Options.cpp	/^        char *tip;$/;"	m	struct:ocOptionValue	file:
ocOptionValue	cpp/Options.cpp	/^        ocOptionValue() :$/;"	f	struct:ocOptionValue
~ocOptionValue	cpp/Options.cpp	/^        ~ocOptionValue() {$/;"	f	struct:ocOptionValue
ocOptionDef	cpp/Options.cpp	/^struct ocOptionDef {$/;"	s	file:
next	cpp/Options.cpp	/^        ocOptionDef *next;$/;"	m	struct:ocOptionDef	file:
name	cpp/Options.cpp	/^        char *name;$/;"	m	struct:ocOptionDef	file:
abbrev	cpp/Options.cpp	/^        char *abbrev;$/;"	m	struct:ocOptionDef	file:
tip	cpp/Options.cpp	/^        char *tip;$/;"	m	struct:ocOptionDef	file:
multi	cpp/Options.cpp	/^        bool multi;$/;"	m	struct:ocOptionDef	file:
values	cpp/Options.cpp	/^        struct ocOptionValue *values;$/;"	m	struct:ocOptionDef	typeref:struct:ocOptionDef::ocOptionValue	file:
ocOptionDef	cpp/Options.cpp	/^        ocOptionDef() :$/;"	f	struct:ocOptionDef
~ocOptionDef	cpp/Options.cpp	/^        ~ocOptionDef() {$/;"	f	struct:ocOptionDef
ocOption	cpp/Options.cpp	/^struct ocOption {$/;"	s	file:
next	cpp/Options.cpp	/^        ocOption *next;$/;"	m	struct:ocOption	file:
def	cpp/Options.cpp	/^        ocOptionDef *def;$/;"	m	struct:ocOption	file:
value	cpp/Options.cpp	/^        char *value;$/;"	m	struct:ocOption	file:
ocOption	cpp/Options.cpp	/^        ocOption(ocOptionDef *d, const char *v) :$/;"	f	struct:ocOption
~ocOption	cpp/Options.cpp	/^        ~ocOption() {$/;"	f	struct:ocOption
setStandardOptions	cpp/Options.cpp	/^static void setStandardOptions(Options *opts) {$/;"	f	file:
Options	cpp/Options.cpp	/^Options::Options() :$/;"	f	class:Options
~Options	cpp/Options.cpp	/^Options::~Options() {$/;"	f	class:Options
addOptionName	cpp/Options.cpp	/^ocOptionDef *Options::addOptionName(const char *name, const char *abbrev, const char *tip, bool multi) {$/;"	f	class:Options
addOptionValue	cpp/Options.cpp	/^void Options::addOptionValue(struct ocOptionDef *option, const char *value, const char *tip) {$/;"	f	class:Options
findOptionByName	cpp/Options.cpp	/^ocOptionDef *Options::findOptionByName(const char *name) {$/;"	f	class:Options
findOptionByAbbrev	cpp/Options.cpp	/^ocOptionDef *Options::findOptionByAbbrev(const char *abbrev) {$/;"	f	class:Options
setOptions	cpp/Options.cpp	/^void Options::setOptions(int argc, char **argv) {$/;"	f	class:Options
getLine	cpp/Options.cpp	/^bool Options::getLine(FILE *fd, char *line, int *lineno) {$/;"	f	class:Options
readOptions	cpp/Options.cpp	/^bool Options::readOptions(FILE *fd) {$/;"	f	class:Options
setOptionString	cpp/Options.cpp	/^bool Options::setOptionString(ocOptionDef *def, const char *value) {$/;"	f	class:Options
setOptionFloat	cpp/Options.cpp	/^bool Options::setOptionFloat(ocOptionDef *def, double nvalue) {$/;"	f	class:Options
getOptionString	cpp/Options.cpp	/^bool Options::getOptionString(const char *name, void **nextp, const char **value) {$/;"	f	class:Options
getOptionFloat	cpp/Options.cpp	/^bool Options::getOptionFloat(const char *name, void **nextp, double *nvalue) {$/;"	f	class:Options
write	cpp/Options.cpp	/^void Options::write(FILE *fd, bool printHTML, bool skipNominal) {$/;"	f	class:Options
keyAddr	cpp/StateConstraint.cpp	/^#define keyAddr(/;"	d	file:
StateConstraint	cpp/StateConstraint.cpp	/^StateConstraint::StateConstraint(int keysz, long size)$/;"	f	class:StateConstraint
~StateConstraint	cpp/StateConstraint.cpp	/^StateConstraint::~StateConstraint()$/;"	f	class:StateConstraint
addConstraint	cpp/StateConstraint.cpp	/^void StateConstraint::addConstraint(KeySegment *key)$/;"	f	class:StateConstraint
getConstraintCount	cpp/StateConstraint.cpp	/^long StateConstraint::getConstraintCount()$/;"	f	class:StateConstraint
getConstraint	cpp/StateConstraint.cpp	/^KeySegment *StateConstraint::getConstraint(long index)$/;"	f	class:StateConstraint
getKeySize	cpp/StateConstraint.cpp	/^int StateConstraint::getKeySize()$/;"	f	class:StateConstraint
SB	cpp/occ.cpp	/^#undef SB$/;"	d	file:
main	cpp/occ.cpp	/^int main(int argc, char* argv[]) {$/;"	f
newl	cpp/ReportCommon.cpp	/^void Report::newl(FILE* fd) {$/;"	f	class:Report
hl	cpp/ReportCommon.cpp	/^void Report::hl(FILE* fd) {$/;"	f	class:Report
sepStyle	cpp/ReportCommon.cpp	/^int Report::sepStyle() { return htmlMode ? 0 : separator; }$/;"	f	class:Report
format_arr	cpp/ReportCommon.cpp	/^const char* format_arr[] = {$/;"	v
format_r_arr	cpp/ReportCommon.cpp	/^const char* format_r_arr[] = {$/;"	v
format_l_arr	cpp/ReportCommon.cpp	/^const char* format_l_arr[] = {$/;"	v
format_lr_arr	cpp/ReportCommon.cpp	/^const char* format_lr_arr[] = {$/;"	v
footer_arr	cpp/ReportCommon.cpp	/^const char* footer_arr[] = {$/;"	v
delim_arr	cpp/ReportCommon.cpp	/^const char* delim_arr[] = {$/;"	v
hdr_delim_arr	cpp/ReportCommon.cpp	/^const char* hdr_delim_arr[] = {$/;"	v
header_start	cpp/ReportCommon.cpp	/^const char* header_start[] = {$/;"	v
row_start	cpp/ReportCommon.cpp	/^const char* row_start[] = {$/;"	v
header_cont	cpp/ReportCommon.cpp	/^const char* header_cont[] = {$/;"	v
header_finish	cpp/ReportCommon.cpp	/^const char* header_finish[] = {$/;"	v
header	cpp/ReportCommon.cpp	/^void Report::header(FILE* fd, Relation* rel, bool printLift, bool printCalc, bool printStart) { $/;"	f	class:Report
format	cpp/ReportCommon.cpp	/^const char* Report::format(bool printLift, bool printCalc) { $/;"	f	class:Report
footer	cpp/ReportCommon.cpp	/^void Report::footer(FILE* fd) { fprintf(fd, "%s", footer_arr[sepStyle()]); }$/;"	f	class:Report
delim	cpp/ReportCommon.cpp	/^const char* Report::delim() { return delim_arr[sepStyle()]; }$/;"	f	class:Report
hdr_delim	cpp/ReportCommon.cpp	/^const char* Report::hdr_delim() { return hdr_delim_arr[sepStyle()]; }$/;"	f	class:Report
printTableRow	cpp/ReportCommon.cpp	/^void Report::printTableRow(FILE* fd, bool blue, VariableList* varlist, int var_count, Relation* rel, double value, KeySegment* refkey, double refvalue, double iviValue, double adjustConstant, double sample_size, bool printLift, bool printCalc) {$/;"	f	class:Report
printTable	cpp/ReportCommon.cpp	/^void Report::printTable(FILE* fd, Relation* rel, Table* fit_table, Table* input_table, Table* indep_table, double adjustConstant, double sample_size, bool printLift, bool printCalc) {$/;"	f	class:Report
printConditional_DV	cpp/ReportPrintConditionalDV.cpp	/^void Report::printConditional_DV(FILE *fd, Model *model, bool calcExpectedDV, char* classTarget) {$/;"	f	class:Report
printConditional_DV	cpp/ReportPrintConditionalDV.cpp	/^void Report::printConditional_DV(FILE *fd, Relation *rel, bool calcExpectedDV, char* classTarget) {$/;"	f	class:Report
printConditional_DV	cpp/ReportPrintConditionalDV.cpp	/^void Report::printConditional_DV(FILE *fd, Model *model, Relation *rel, bool calcExpectedDV, char* classTarget) {$/;"	f	class:Report
findName	cpp/AttributeList.cpp	/^static int findName(const char **names, const char *name, int count)$/;"	f	file:
AttributeList	cpp/AttributeList.cpp	/^AttributeList::AttributeList(int size)$/;"	f	class:AttributeList
~AttributeList	cpp/AttributeList.cpp	/^AttributeList::~AttributeList()$/;"	f	class:AttributeList
size	cpp/AttributeList.cpp	/^long AttributeList::size()$/;"	f	class:AttributeList
reset	cpp/AttributeList.cpp	/^void AttributeList::reset()$/;"	f	class:AttributeList
setAttribute	cpp/AttributeList.cpp	/^void AttributeList::setAttribute(const char *name, double value)$/;"	f	class:AttributeList
getAttributeIndex	cpp/AttributeList.cpp	/^int AttributeList::getAttributeIndex(const char *name)$/;"	f	class:AttributeList
getAttribute	cpp/AttributeList.cpp	/^double AttributeList::getAttribute(const char *name)$/;"	f	class:AttributeList
getAttributeCount	cpp/AttributeList.cpp	/^int AttributeList::getAttributeCount()$/;"	f	class:AttributeList
getAttributeByIndex	cpp/AttributeList.cpp	/^double AttributeList::getAttributeByIndex(int index)$/;"	f	class:AttributeList
dump	cpp/AttributeList.cpp	/^void AttributeList::dump()$/;"	f	class:AttributeList
search	cpp/Search.cpp	/^Model **SearchFullDown::search(Model *start) {$/;"	f	class:SearchFullDown
SearchStackEntry	cpp/Search.cpp	/^struct SearchStackEntry {$/;"	s	file:
relIndex	cpp/Search.cpp	/^        int relIndex; \/\/ index of the next relation to consider, among the relations in the starting model$/;"	m	struct:SearchStackEntry	file:
nextRelIndex	cpp/Search.cpp	/^        int nextRelIndex; \/\/ the next index to check$/;"	m	struct:SearchStackEntry	file:
varIndex	cpp/Search.cpp	/^        int varIndex; \/\/ index of the current variable in varList$/;"	m	struct:SearchStackEntry	file:
innerList	cpp/Search.cpp	/^        int *innerList; \/\/ list of variable indices in all stack entries so far$/;"	m	struct:SearchStackEntry	file:
outerList	cpp/Search.cpp	/^        int *outerList; \/\/ list of all variable indices in all relations but this one$/;"	m	struct:SearchStackEntry	file:
innerListCount	cpp/Search.cpp	/^        int innerListCount;$/;"	m	struct:SearchStackEntry	file:
outerListCount	cpp/Search.cpp	/^        int outerListCount;$/;"	m	struct:SearchStackEntry	file:
SearchStackEntry	cpp/Search.cpp	/^        SearchStackEntry() :$/;"	f	struct:SearchStackEntry
~SearchStackEntry	cpp/Search.cpp	/^        ~SearchStackEntry() {$/;"	f	struct:SearchStackEntry
set	cpp/Search.cpp	/^        void set(int relIndex, int varIndex, int *innerList, int innerListCount, int *outerList, int outerListCount) {$/;"	f	struct:SearchStackEntry
clean	cpp/Search.cpp	/^        void clean() {$/;"	f	struct:SearchStackEntry
dump	cpp/Search.cpp	/^void SearchStackEntry::dump(Model *model) {$/;"	f	class:SearchStackEntry
getComplement	cpp/Search.cpp	/^static void getComplement(int *innerList, int innerListCount, int *outerList, int maxcount) {$/;"	f	file:
varSubset	cpp/Search.cpp	/^bool varSubset(int *vars, int varcount, Relation *rel) {$/;"	f
currentVars	cpp/Search.cpp	/^void currentVars(int *vars, SearchStackEntry *stack, int top) {$/;"	f
pushStartingRelation	cpp/Search.cpp	/^static bool pushStartingRelation(SearchStackEntry *stack, int &top, Model *model, int relIndex) {$/;"	f	file:
splitVariables	cpp/Search.cpp	/^static void splitVariables(int *relvars, int relvarcount, int *topvars, int topvarcount, int **innerList,$/;"	f	file:
pushRelation	cpp/Search.cpp	/^static bool pushRelation(SearchStackEntry *stack, int &top, Model *model, int relIndex) {$/;"	f	file:
pushMatchingRelation	cpp/Search.cpp	/^static bool pushMatchingRelation(SearchStackEntry *stack, int &top, Model *model) {$/;"	f	file:
pop	cpp/Search.cpp	/^static bool pop(SearchStackEntry *stack, int &top) {$/;"	f	file:
makeCandidate	cpp/Search.cpp	/^void SearchFullUp::makeCandidate(SearchStackEntry *stack, int top, Model *start) {$/;"	f	class:SearchFullUp
search	cpp/Search.cpp	/^Model **SearchFullUp::search(Model *start) {$/;"	f	class:SearchFullUp
recurseDirected	cpp/Search.cpp	/^void SearchSbFullUp::recurseDirected(Model *start, int cur_var, int cur_index, int *var_indices, int *state_indices,$/;"	f	class:SearchSbFullUp
addToCache	cpp/Search.cpp	/^bool SearchSbFullUp::addToCache(Model *model, int &models_found, Model **model_list) {$/;"	f	class:SearchSbFullUp
search	cpp/Search.cpp	/^Model** SearchSbFullUp::search(Model* start) {$/;"	f	class:SearchSbFullUp
search	cpp/Search.cpp	/^Model **SearchLooplessDown::search(Model *start) {$/;"	f	class:SearchLooplessDown
recurseDirected	cpp/Search.cpp	/^void SearchSbLooplessUp::recurseDirected(int cur_var, int cur_index, int *var_indices, int *state_indices,$/;"	f	class:SearchSbLooplessUp
addToCache	cpp/Search.cpp	/^bool SearchSbLooplessUp::addToCache(Model *model, int &models_found, Model **model_list) {$/;"	f	class:SearchSbLooplessUp
search	cpp/Search.cpp	/^Model **SearchSbLooplessUp::search(Model *start) {$/;"	f	class:SearchSbLooplessUp
search	cpp/Search.cpp	/^Model **SearchLooplessUp::search(Model *start) {$/;"	f	class:SearchLooplessUp
search	cpp/Search.cpp	/^Model **SearchDisjointUp::search(Model *start) {$/;"	f	class:SearchDisjointUp
factorial	cpp/Search.cpp	/^long factorial(long n) {$/;"	f
comb	cpp/Search.cpp	/^long comb(long n, long m) {$/;"	f
makeChainModels	cpp/Search.cpp	/^bool SearchChain::makeChainModels() {$/;"	f	class:SearchChain
search	cpp/Search.cpp	/^Model **SearchChain::search(Model *start) {$/;"	f	class:SearchChain
search	cpp/Search.cpp	/^Model **SearchDisjointDown::search(Model *start) {$/;"	f	class:SearchDisjointDown
sort_var_list	cpp/ReportQsort.cpp	/^VariableList *sort_var_list;$/;"	v
sort_count	cpp/ReportQsort.cpp	/^int sort_count;$/;"	v
sort_vars	cpp/ReportQsort.cpp	/^int *sort_vars;$/;"	v
sort_keys	cpp/ReportQsort.cpp	/^KeySegment **sort_keys;$/;"	v
sort_table	cpp/ReportQsort.cpp	/^Table *sort_table;$/;"	v
sortAttr	cpp/ReportQsort.cpp	/^const char *sortAttr;$/;"	v
sortDir	cpp/ReportQsort.cpp	/^Direction sortDir;$/;"	v
searchDir	cpp/ReportQsort.cpp	/^Direction searchDir;$/;"	v
allNumeric	cpp/ReportQsort.cpp	/^int allNumeric(const char* s) {$/;"	f
strcmpAccountingForNumbers	cpp/ReportQsort.cpp	/^int strcmpAccountingForNumbers(const char* s1, const char* s2) {$/;"	f
sortCompare	cpp/ReportQsort.cpp	/^int sortCompare(const void *k1, const void *k2) {$/;"	f
sortKeys	cpp/ReportQsort.cpp	/^int sortKeys(const void *d1, const void *d2) {$/;"	f
orderIndices	cpp/ReportQsort.cpp	/^void orderIndices(const char **stringArray, int len, int *order) {$/;"	f
Model	cpp/Model.cpp	/^Model::Model(int size) {$/;"	f	class:Model
~Model	cpp/Model.cpp	/^Model::~Model() {$/;"	f	class:Model
deleteStructMatrix	cpp/Model.cpp	/^void Model::deleteStructMatrix() {$/;"	f	class:Model
size	cpp/Model.cpp	/^long Model::size() {$/;"	f	class:Model
isStateBased	cpp/Model.cpp	/^bool Model::isStateBased() {$/;"	f	class:Model
deleteRelationLinks	cpp/Model.cpp	/^void Model::deleteRelationLinks() {$/;"	f	class:Model
copyRelations	cpp/Model.cpp	/^void Model::copyRelations(Model &model, int skip1, int skip2) {$/;"	f	class:Model
setAttribute	cpp/Model.cpp	/^void Model::setAttribute(const char *name, double value) {$/;"	f	class:Model
getAttribute	cpp/Model.cpp	/^double Model::getAttribute(const char *name) {$/;"	f	class:Model
getIndicesFromKey	cpp/Model.cpp	/^int * Model::getIndicesFromKey(KeySegment *key, VariableList *vars, int statespace, int **stateSpaceArr,$/;"	f	class:Model
makeStructMatrix	cpp/Model.cpp	/^void Model::makeStructMatrix(int statespace, VariableList *vars, int **stateSpaceArr) {$/;"	f	class:Model
completeSbModel	cpp/Model.cpp	/^void Model::completeSbModel() {$/;"	f	class:Model
makeStateSpaceArray	cpp/Model.cpp	/^int** Model::makeStateSpaceArray(VariableList *varList, int statespace) {$/;"	f	class:Model
addRelation	cpp/Model.cpp	/^void Model::addRelation(Relation *newRelation, bool normalize, ModelCache *cache) {$/;"	f	class:Model
getRelations	cpp/Model.cpp	/^int Model::getRelations(Relation **rels, int maxRelations) {$/;"	f	class:Model
getRelation	cpp/Model.cpp	/^Relation *Model::getRelation(int index) {$/;"	f	class:Model
containsRelation	cpp/Model.cpp	/^bool Model::containsRelation(Relation *relation, ModelCache *cache) {$/;"	f	class:Model
containsModel	cpp/Model.cpp	/^bool Model::containsModel(Model *other) {$/;"	f	class:Model
isEquivalentTo	cpp/Model.cpp	/^bool Model::isEquivalentTo(Model *other) {$/;"	f	class:Model
getRelationCount	cpp/Model.cpp	/^int Model::getRelationCount() {$/;"	f	class:Model
getFitTable	cpp/Model.cpp	/^Table *Model::getFitTable() {$/;"	f	class:Model
setFitTable	cpp/Model.cpp	/^void Model::setFitTable(Table *tbl) {$/;"	f	class:Model
deleteFitTable	cpp/Model.cpp	/^void Model::deleteFitTable() {$/;"	f	class:Model
getPrintName	cpp/Model.cpp	/^const char * Model::getPrintName(int useInverse) {$/;"	f	class:Model
printStructMatrix	cpp/Model.cpp	/^void Model::printStructMatrix() {$/;"	f	class:Model
getStructMatrix	cpp/Model.cpp	/^int **Model::getStructMatrix(int *statespace, int *totalConst) {$/;"	f	class:Model
dump	cpp/Model.cpp	/^void Model::dump(bool detail) {$/;"	f	class:Model
SWIGEXPORT	cpp/pyoccam.cpp	/^#       define SWIGEXPORT(/;"	d	file:
SWIGEXPORT	cpp/pyoccam.cpp	/^#       define SWIGEXPORT(/;"	d	file:
SWIGEXPORT	cpp/pyoccam.cpp	/^#  define SWIGEXPORT(/;"	d	file:
onError	cpp/pyoccam.cpp	/^#define onError(/;"	d	file:
DefinePyObject	cpp/pyoccam.cpp	/^#define DefinePyObject(/;"	d	file:
DefinePyFunction	cpp/pyoccam.cpp	/^#define DefinePyFunction(/;"	d	file:
PyMethodDef	cpp/pyoccam.cpp	/^#define PyMethodDef(/;"	d	file:
ObjRef	cpp/pyoccam.cpp	/^#define ObjRef(/;"	d	file:
ObjNew	cpp/pyoccam.cpp	/^#define ObjNew(/;"	d	file:
TRACE	cpp/pyoccam.cpp	/^#define TRACE /;"	d	file:
TRACE_FN	cpp/pyoccam.cpp	/^#define TRACE_FN(/;"	d	file:
notrace	cpp/pyoccam.cpp	/^void notrace(...) {$/;"	f
TRACE	cpp/pyoccam.cpp	/^#define TRACE /;"	d	file:
TRACE_FN	cpp/pyoccam.cpp	/^#define TRACE_FN /;"	d	file:
ErrorObject	cpp/pyoccam.cpp	/^static PyObject *ErrorObject; \/* local exception *\/$/;"	v	file:
VBMManager	cpp/pyoccam.cpp	/^DefinePyObject(VBMManager);$/;"	v
SBMManager	cpp/pyoccam.cpp	/^DefinePyObject(SBMManager);$/;"	v
Relation	cpp/pyoccam.cpp	/^DefinePyObject(Relation);$/;"	v
Model	cpp/pyoccam.cpp	/^DefinePyObject(Model);$/;"	v
Report	cpp/pyoccam.cpp	/^DefinePyObject(Report);$/;"	v
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, initFromCommandLine) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, makeAllChildRelations) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, getDvName) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, getVariableList) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, searchOneLevel) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, setSearchType) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, makeChildModel) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, getTopRefModel) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, getBottomRefModel) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, getRefModel) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, setRefModel) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, computeDF) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, computeH) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, computeT) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, computeInformationStatistics) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, computeDFStatistics) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, computeL2Statistics) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, computePearsonStatistics) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, computeDependentStatistics) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, computeBPStatistics) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, computeIncrementalAlpha) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, compareProgenitors) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, makeModel) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, setFilter) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, setDDFMethod) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, setAlphaThreshold) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, setUseInverseNotation) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, setValuesAreFunctions) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, setSearchDirection) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, printFitReport) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, getOption) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, getOptionList) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, Report) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, makeFitTable) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, isDirected) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, printOptions) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, deleteTablesFromCache) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, deleteModelFromCache) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, getSampleSz) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, printSizes) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, printBasicStatistics) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, computePercentCorrect) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, getMemUsage) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, hasTestData) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, dumpRelations) {$/;"	f
VBMManager_methods	cpp/pyoccam.cpp	/^static struct PyMethodDef VBMManager_methods[] = { PyMethodDef(VBMManager, initFromCommandLine),$/;"	v	typeref:struct:PyMethodDef	file:
VBMManager_dealloc	cpp/pyoccam.cpp	/^static void VBMManager_dealloc(PVBMManager *self) {$/;"	f	file:
VBMManager_getattr	cpp/pyoccam.cpp	/^PyObject * VBMManager_getattr(PyObject *self, char *name) {$/;"	f
TVBMManager	cpp/pyoccam.cpp	/^PyTypeObject TVBMManager = { PyObject_HEAD_INIT(&PyType_Type) 0, "VBMManager",$/;"	v
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(VBMManager, new) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(SBMManager, initFromCommandLine) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(SBMManager, searchOneLevel) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(SBMManager, setSearchType) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(SBMManager, getTopRefModel) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(SBMManager, getBottomRefModel) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(SBMManager, getRefModel) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(SBMManager, setRefModel) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(SBMManager, computeDF) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(SBMManager, computeH) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(SBMManager, computeT) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(SBMManager, computeInformationStatistics) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(SBMManager, computeDFStatistics) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(SBMManager, computeL2Statistics) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(SBMManager, computePearsonStatistics) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(SBMManager, computeDependentStatistics) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(SBMManager, computeBPStatistics) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(SBMManager, computeIncrementalAlpha) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(SBMManager, compareProgenitors) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(SBMManager, makeSbModel) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(SBMManager, setFilter) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(SBMManager, setSearchDirection) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(SBMManager, printFitReport) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(SBMManager, getOption) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(SBMManager, getOptionList) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(SBMManager, Report) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(SBMManager, makeFitTable) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(SBMManager, isDirected) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(SBMManager, printOptions) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(SBMManager, deleteModelFromCache) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(SBMManager, deleteTablesFromCache) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(SBMManager, getSampleSz) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(SBMManager, computePercentCorrect) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(SBMManager, getMemUsage) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(SBMManager, printBasicStatistics) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(SBMManager, hasTestData) {$/;"	f
SBMManager_methods	cpp/pyoccam.cpp	/^static struct PyMethodDef SBMManager_methods[] = { PyMethodDef(SBMManager, initFromCommandLine),$/;"	v	typeref:struct:PyMethodDef	file:
SBMManager_dealloc	cpp/pyoccam.cpp	/^static void SBMManager_dealloc(PSBMManager *self) {$/;"	f	file:
SBMManager_getattr	cpp/pyoccam.cpp	/^PyObject * SBMManager_getattr(PyObject *self, char *name) {$/;"	f
TSBMManager	cpp/pyoccam.cpp	/^PyTypeObject TSBMManager = { PyObject_HEAD_INIT(&PyType_Type) 0, "SBMManager",$/;"	v
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(SBMManager, new) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(Relation, get) {$/;"	f
Relation_methods	cpp/pyoccam.cpp	/^static struct PyMethodDef Relation_methods[] = { PyMethodDef(Relation, get), { NULL, NULL, 0 } };$/;"	v	typeref:struct:PyMethodDef	file:
Relation_getattr	cpp/pyoccam.cpp	/^Relation_getattr(PyObject *self, char *name) {$/;"	f
TRelation	cpp/pyoccam.cpp	/^PyTypeObject TRelation = { PyObject_HEAD_INIT(&PyType_Type) 0, "Relation",$/;"	v
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(Relation, new) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(Model, getRelation) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(Model, get) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(Model, deleteFitTable) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(Model, deleteRelationLinks) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(Model, setProgenitor) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(Model, getProgenitor) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(Model, setID) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(Model, isEquivalentTo) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(Model, dump) {$/;"	f
Model_methods	cpp/pyoccam.cpp	/^static struct PyMethodDef Model_methods[] = { PyMethodDef(Model, getRelation), PyMethodDef(Model, get),$/;"	v	typeref:struct:PyMethodDef	file:
Model_getattr	cpp/pyoccam.cpp	/^PyObject * Model_getattr(PyObject *self, char *name) {$/;"	f
Model_setattr	cpp/pyoccam.cpp	/^int Model_setattr(PyObject *self, char *name, PyObject *value) {$/;"	f
TModel	cpp/pyoccam.cpp	/^PyTypeObject TModel = { PyObject_HEAD_INIT(&PyType_Type) 0, "Model", sizeof(PModel), 0,$/;"	v
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(Model, new) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(Report, get) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(Report, addModel) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(Report, setDefaultFitModel) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(Report, setAttributes) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(Report, sort) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(Report, setSeparator) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(Report, printReport) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(Report, writeReport) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(Report, printResiduals) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(Report, printConditional_DV) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(Report, bestModelName) { $/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(Report, dvName) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(Report, bestModelBIC) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(Report, variableList) {$/;"	f
DefinePyFunction	cpp/pyoccam.cpp	/^DefinePyFunction(Report, bestModelData) { $/;"	f
Report_methods	cpp/pyoccam.cpp	/^static struct PyMethodDef Report_methods[] = { PyMethodDef(Report, bestModelName), PyMethodDef(Report, bestModelData), PyMethodDef(Report, get), PyMethodDef(Report, addModel),$/;"	v	typeref:struct:PyMethodDef	file:
Report_getattr	cpp/pyoccam.cpp	/^PyObject * Report_getattr(PyObject *self, char *name) {$/;"	f
TReport	cpp/pyoccam.cpp	/^PyTypeObject TReport = { PyObject_HEAD_INIT(&PyType_Type) 0, "Report", sizeof(PReport), 0,$/;"	v
setHTMLMode	cpp/pyoccam.cpp	/^static PyObject *setHTMLMode(PyObject *self, PyObject *args) {$/;"	f	file:
occam_methods	cpp/pyoccam.cpp	/^static struct PyMethodDef occam_methods[] = { { "Relation", Relation_new, 1 }, { "Model", Model_new, 1 }, {$/;"	v	typeref:struct:PyMethodDef	file:
initoccam	cpp/pyoccam.cpp	/^void initoccam() {$/;"	f
findUpper	cpp/VariableList.cpp	/^static const char *findUpper(const char *cp) {$/;"	f	file:
normalizeCase	cpp/VariableList.cpp	/^static void normalizeCase(char *cp) {$/;"	f	file:
VariableList	cpp/VariableList.cpp	/^VariableList::VariableList(int maxVars) {$/;"	f	class:VariableList
~VariableList	cpp/VariableList.cpp	/^VariableList::~VariableList() {$/;"	f	class:VariableList
size	cpp/VariableList.cpp	/^long VariableList::size() {$/;"	f	class:VariableList
addVariable	cpp/VariableList.cpp	/^int VariableList::addVariable(const char *name, const char *abbrev, int cardinality, bool dv, bool rebin,$/;"	f	class:VariableList
isVarInUse	cpp/VariableList.cpp	/^int VariableList::isVarInUse(int varCounter) {$/;"	f	class:VariableList
markForNoUse	cpp/VariableList.cpp	/^int VariableList::markForNoUse() {$/;"	f	class:VariableList
getNewValue	cpp/VariableList.cpp	/^int VariableList::getNewValue(int index, char * old_value, char*new_value) {$/;"	f	class:VariableList
getKeySize	cpp/VariableList.cpp	/^int VariableList::getKeySize() {$/;"	f	class:VariableList
getVariable	cpp/VariableList.cpp	/^Variable *VariableList::getVariable(int index) {$/;"	f	class:VariableList
dump	cpp/VariableList.cpp	/^void VariableList::dump() {$/;"	f	class:VariableList
getPrintName	cpp/VariableList.cpp	/^void VariableList::getPrintName(char *str, int maxlength, int count, int *vars1, int *states) {$/;"	f	class:VariableList
getPrintLength	cpp/VariableList.cpp	/^int VariableList::getPrintLength(int count, int *vars, int *states) {$/;"	f	class:VariableList
isDirected	cpp/VariableList.cpp	/^bool VariableList::isDirected() {$/;"	f	class:VariableList
getDV	cpp/VariableList.cpp	/^int VariableList::getDV() {$/;"	f	class:VariableList
getVariableList	cpp/VariableList.cpp	/^int VariableList::getVariableList(const char *name, int *varlist) {$/;"	f	class:VariableList
getVarStateList	cpp/VariableList.cpp	/^int VariableList::getVarStateList(const char *name, int *varlist, int *stlist) {$/;"	f	class:VariableList
getVarValueIndex	cpp/VariableList.cpp	/^int VariableList::getVarValueIndex(int varindex, const char *value) {$/;"	f	class:VariableList
getVarValue	cpp/VariableList.cpp	/^const char *VariableList::getVarValue(int varindex, int valueindex) {$/;"	f	class:VariableList
checkCardinalities	cpp/VariableList.cpp	/^bool VariableList::checkCardinalities() {$/;"	f	class:VariableList
Relation	cpp/Relation.cpp	/^Relation::Relation(VariableList *list, int size, int keysz, long stateconstsz) {$/;"	f	class:Relation
~Relation	cpp/Relation.cpp	/^Relation::~Relation() {$/;"	f	class:Relation
size	cpp/Relation.cpp	/^long Relation::size() {$/;"	f	class:Relation
isStateBased	cpp/Relation.cpp	/^bool Relation::isStateBased() {$/;"	f	class:Relation
addVariable	cpp/Relation.cpp	/^void Relation::addVariable(int varindex, int stateind) {$/;"	f	class:Relation
getVariableList	cpp/Relation.cpp	/^VariableList *Relation::getVariableList() {$/;"	f	class:Relation
copyVariables	cpp/Relation.cpp	/^int Relation::copyVariables(int *indices, int maxCount, int skip) {$/;"	f	class:Relation
getVariables	cpp/Relation.cpp	/^int *Relation::getVariables() {$/;"	f	class:Relation
getStateIndices	cpp/Relation.cpp	/^int *Relation::getStateIndices() {$/;"	f	class:Relation
getDDFPortion	cpp/Relation.cpp	/^long long int Relation::getDDFPortion() {$/;"	f	class:Relation
copyMissingVariables	cpp/Relation.cpp	/^int Relation::copyMissingVariables(int *indices, int maxCount) {$/;"	f	class:Relation
getIndependentVariables	cpp/Relation.cpp	/^int Relation::getIndependentVariables(int *indices, int maxCount) {$/;"	f	class:Relation
getDependentVariables	cpp/Relation.cpp	/^int Relation::getDependentVariables(int *indices, int maxCount) {$/;"	f	class:Relation
getVariable	cpp/Relation.cpp	/^int Relation::getVariable(int index) {$/;"	f	class:Relation
findVariable	cpp/Relation.cpp	/^int Relation::findVariable(int varid) {$/;"	f	class:Relation
getVariableCount	cpp/Relation.cpp	/^int Relation::getVariableCount() {$/;"	f	class:Relation
getExpansionSize	cpp/Relation.cpp	/^double Relation::getExpansionSize() {$/;"	f	class:Relation
setTable	cpp/Relation.cpp	/^void Relation::setTable(Table *tbl) {$/;"	f	class:Relation
getTable	cpp/Relation.cpp	/^Table *Relation::getTable() {$/;"	f	class:Relation
deleteTable	cpp/Relation.cpp	/^void Relation::deleteTable() {$/;"	f	class:Relation
setStateConstraints	cpp/Relation.cpp	/^void Relation::setStateConstraints(class StateConstraint *constraints) {$/;"	f	class:Relation
getStateConstraints	cpp/Relation.cpp	/^StateConstraint *Relation::getStateConstraints() {$/;"	f	class:Relation
compare	cpp/Relation.cpp	/^int Relation::compare(Relation *other) {$/;"	f	class:Relation
contains	cpp/Relation.cpp	/^bool Relation::contains(Relation *other) {$/;"	f	class:Relation
isIndependentOnly	cpp/Relation.cpp	/^bool Relation::isIndependentOnly() {$/;"	f	class:Relation
isDependentOnly	cpp/Relation.cpp	/^bool Relation::isDependentOnly() {$/;"	f	class:Relation
getNC	cpp/Relation.cpp	/^long long Relation::getNC() {$/;"	f	class:Relation
makeMask	cpp/Relation.cpp	/^void Relation::makeMask(KeySegment *msk) {$/;"	f	class:Relation
getMask	cpp/Relation.cpp	/^KeySegment *Relation::getMask() {$/;"	f	class:Relation
sortCompare	cpp/Relation.cpp	/^static int sortCompare(const void *k1, const void *k2) {$/;"	f	file:
sorting_vars	cpp/Relation.cpp	/^static int *sorting_vars;$/;"	v	file:
sbSortCompare	cpp/Relation.cpp	/^static int sbSortCompare(const void *k1, const void *k2) {$/;"	f	file:
sort	cpp/Relation.cpp	/^void Relation::sort(int *vars, int varCount, int *states) {$/;"	f	class:Relation
sort	cpp/Relation.cpp	/^void Relation::sort() {$/;"	f	class:Relation
setAttribute	cpp/Relation.cpp	/^void Relation::setAttribute(const char *name, double value) {$/;"	f	class:Relation
getAttribute	cpp/Relation.cpp	/^double Relation::getAttribute(const char *name) {$/;"	f	class:Relation
getPrintName	cpp/Relation.cpp	/^const char* Relation::getPrintName(int useInverse) {$/;"	f	class:Relation
getMatchingTupleValue	cpp/Relation.cpp	/^double Relation::getMatchingTupleValue(KeySegment *key) {$/;"	f	class:Relation
buildMask	cpp/Relation.cpp	/^void Relation::buildMask() {$/;"	f	class:Relation
dump	cpp/Relation.cpp	/^void Relation::dump() {$/;"	f	class:Relation
printResiduals	cpp/ReportPrintResiduals.cpp	/^void Report::printResiduals(FILE *fd, Model *model, bool skipTrained, bool skipIVIs) {$/;"	f	class:Report
printWholeTable	cpp/ReportPrintResiduals.cpp	/^void Report::printWholeTable(FILE* fd, Model* model, double adjustConstant) {$/;"	f	class:Report
printSingleVariable	cpp/ReportPrintResiduals.cpp	/^void Report::printSingleVariable(FILE* fd, Relation* rel, double adjustConstant) {$/;"	f	class:Report
printLift	cpp/ReportPrintResiduals.cpp	/^void Report::printLift(FILE* fd, Relation* rel, double adjustConstant) {$/;"	f	class:Report
printRel	cpp/ReportPrintResiduals.cpp	/^void Report::printRel(FILE* fd, Relation* rel, double adjustConstant, bool printLift) {$/;"	f	class:Report
printTestData	cpp/ReportPrintResiduals.cpp	/^void Report::printTestData(FILE* fd, Relation* rel, Table* fit_table, Table* indep_table, double adjustConstant, int keysize, bool printCalc, bool printLift) { $/;"	f	class:Report
printSummary	cpp/ReportPrintResiduals.cpp	/^void Report::printSummary(FILE* fd, Model* model, double adjustConstant) {$/;"	f	class:Report
dyadHeader	cpp/ReportPrintResiduals.cpp	/^constexpr const char* dyadHeader[4] = {$/;"	v
dyadFooter	cpp/ReportPrintResiduals.cpp	/^constexpr const char* dyadFooter[4] = {$/;"	v
dyadFmt	cpp/ReportPrintResiduals.cpp	/^constexpr const char* dyadFmt[4] = {$/;"	v
findEntropies	cpp/ReportPrintResiduals.cpp	/^void Report::findEntropies(Relation* rel, double& h1, double& h2, double& h12) {$/;"	f	class:Report
findLift	cpp/ReportPrintResiduals.cpp	/^void Report::findLift(Relation* rel, double sample_size, double& lift, char*& stateName, double& freq) {$/;"	f	class:Report
printDyadSummary	cpp/ReportPrintResiduals.cpp	/^void Report::printDyadSummary(FILE* fd, Model* model) {$/;"	f	class:Report
buildKey	cpp/Key.cpp	/^void Key::buildKey(KeySegment *key, int keysize, class VariableList *vars,$/;"	f	class:Key
buildFullKey	cpp/Key.cpp	/^void Key::buildFullKey(KeySegment *key, int keysize, class VariableList *vars, int *varvalues)$/;"	f	class:Key
setKeyValue	cpp/Key.cpp	/^void Key::setKeyValue(KeySegment *key, int keysize, class VariableList *vars, int index, int value)$/;"	f	class:Key
getKeyValue	cpp/Key.cpp	/^int Key::getKeyValue(KeySegment *key, int keysize, class VariableList *vars, int index)$/;"	f	class:Key
compareKeys	cpp/Key.cpp	/^int Key::compareKeys(KeySegment *key1, KeySegment *key2, int keysize)$/;"	f	class:Key
copyKey	cpp/Key.cpp	/^int Key::copyKey(KeySegment *key1, KeySegment *key2, int keysize)$/;"	f	class:Key
buildMask	cpp/Key.cpp	/^void Key::buildMask(KeySegment *mask, int keysize, class VariableList *vars, int *varindices, int varcount)$/;"	f	class:Key
keyToString	cpp/Key.cpp	/^void Key::keyToString(KeySegment *key, VariableList *vars, char *str)$/;"	f	class:Key
keyToUserString	cpp/Key.cpp	/^void Key::keyToUserString(KeySegment *key, VariableList *vars, char *str)$/;"	f	class:Key
keyToUserString	cpp/Key.cpp	/^void Key::keyToUserString(KeySegment *key, VariableList *vars, char *str, const char *delim, bool showKey)$/;"	f	class:Key
getSiblings	cpp/Key.cpp	/^void Key::getSiblings(KeySegment *key, VariableList *vars, Table *table, long *i_sibs, int DV_ind, int *no_sib)$/;"	f	class:Key
dumpKey	cpp/Key.cpp	/^void Key::dumpKey(KeySegment *key, int keysize)$/;"	f	class:Key
VBMManager	cpp/VBMManager.cpp	/^VBMManager::VBMManager(VariableList *vars, Table *input) :$/;"	f	class:VBMManager
VBMManager	cpp/VBMManager.cpp	/^VBMManager::VBMManager() :$/;"	f	class:VBMManager
~VBMManager	cpp/VBMManager.cpp	/^VBMManager::~VBMManager() {$/;"	f	class:VBMManager
initFromCommandLine	cpp/VBMManager.cpp	/^bool VBMManager::initFromCommandLine(int argc, char **argv) {$/;"	f	class:VBMManager
makeAllChildRelations	cpp/VBMManager.cpp	/^void VBMManager::makeAllChildRelations(Relation *rel, Relation **children, bool makeProject) {$/;"	f	class:VBMManager
makeChildModel	cpp/VBMManager.cpp	/^Model *VBMManager::makeChildModel(Model *model, int remove, bool *fromCache, bool makeProject) {$/;"	f	class:VBMManager
makeReferenceModels	cpp/VBMManager.cpp	/^void VBMManager::makeReferenceModels(Relation *top) {$/;"	f	class:VBMManager
setRefModel	cpp/VBMManager.cpp	/^Model *VBMManager::setRefModel(const char *name) {$/;"	f	class:VBMManager
computeExplainedInformation	cpp/VBMManager.cpp	/^double VBMManager::computeExplainedInformation(Model *model) {$/;"	f	class:VBMManager
computeUnexplainedInformation	cpp/VBMManager.cpp	/^double VBMManager::computeUnexplainedInformation(Model *model) {$/;"	f	class:VBMManager
buildDDF	cpp/VBMManager.cpp	/^void VBMManager::buildDDF(Relation *rel, Model *loModel, Model *diffModel, bool directed) {$/;"	f	class:VBMManager
computeDDF	cpp/VBMManager.cpp	/^double VBMManager::computeDDF(Model *model) {$/;"	f	class:VBMManager
setDDFMethod	cpp/VBMManager.cpp	/^void VBMManager::setDDFMethod(int method) {$/;"	f	class:VBMManager
setUseInverseNotation	cpp/VBMManager.cpp	/^void VBMManager::setUseInverseNotation(int flag) {$/;"	f	class:VBMManager
setSearch	cpp/VBMManager.cpp	/^void VBMManager::setSearch(const char *name) {$/;"	f	class:VBMManager
computeDFStatistics	cpp/VBMManager.cpp	/^void VBMManager::computeDFStatistics(Model *model) {$/;"	f	class:VBMManager
computeInformationStatistics	cpp/VBMManager.cpp	/^void VBMManager::computeInformationStatistics(Model *model) {$/;"	f	class:VBMManager
calculateBP_AicBic	cpp/VBMManager.cpp	/^void VBMManager::calculateBP_AicBic(Model *model) {$/;"	f	class:VBMManager
computeL2Statistics	cpp/VBMManager.cpp	/^void VBMManager::computeL2Statistics(Model *model) {$/;"	f	class:VBMManager
computePearsonStatistics	cpp/VBMManager.cpp	/^void VBMManager::computePearsonStatistics(Model *model) {$/;"	f	class:VBMManager
computeDependentStatistics	cpp/VBMManager.cpp	/^void VBMManager::computeDependentStatistics(Model *model) {$/;"	f	class:VBMManager
computeBPT	cpp/VBMManager.cpp	/^double VBMManager::computeBPT(Model *model) {$/;"	f	class:VBMManager
computeBPStatistics	cpp/VBMManager.cpp	/^void VBMManager::computeBPStatistics(Model *model) {$/;"	f	class:VBMManager
computePercentCorrect	cpp/VBMManager.cpp	/^void VBMManager::computePercentCorrect(Model *model) {$/;"	f	class:VBMManager
setFilter	cpp/VBMManager.cpp	/^void VBMManager::setFilter(const char *attrname, double attrvalue, RelOp op) {$/;"	f	class:VBMManager
applyFilter	cpp/VBMManager.cpp	/^bool VBMManager::applyFilter(Model *model) {$/;"	f	class:VBMManager
setSortAttr	cpp/VBMManager.cpp	/^void VBMManager::setSortAttr(const char *name) {$/;"	f	class:VBMManager
printRefTable	cpp/VBMManager.cpp	/^static void printRefTable(Model *model, FILE *fd, const char *ref, const char **strings, int rows) {$/;"	f	file:
printFitReport	cpp/VBMManager.cpp	/^void VBMManager::printFitReport(Model *model, FILE *fd) {$/;"	f	class:VBMManager
printBasicStatistics	cpp/VBMManager.cpp	/^void VBMManager::printBasicStatistics() {$/;"	f	class:VBMManager
_GNU_SOURCE	cpp/ManagerBase.cpp	/^#define _GNU_SOURCE$/;"	d	file:
backtrace_symbols_err	cpp/ManagerBase.cpp	/^void backtrace_symbols_err(void** trace, size_t size) {$/;"	f
errorReportingTip	cpp/ManagerBase.cpp	/^constexpr char* errorReportingTip = $/;"	v
segfault_handler	cpp/ManagerBase.cpp	/^void segfault_handler(int sig) {$/;"	f
fpe_handler	cpp/ManagerBase.cpp	/^void fpe_handler(int sig) {$/;"	f
defaultRelSize	cpp/ManagerBase.cpp	/^const int defaultRelSize = 10;$/;"	v
projfd	cpp/ManagerBase.cpp	/^static FILE *projfd = NULL;$/;"	v	file:
logProjection	cpp/ManagerBase.cpp	/^void logProjection(const char *name)$/;"	f
logProjection	cpp/ManagerBase.cpp	/^void logProjection(const char *name) {$/;"	f
ManagerBase	cpp/ManagerBase.cpp	/^ManagerBase::ManagerBase(VariableList *vars, Table *input) :$/;"	f	class:ManagerBase
setAlphaThreshold	cpp/ManagerBase.cpp	/^void ManagerBase::setAlphaThreshold(double thresh)$/;"	f	class:ManagerBase
~ManagerBase	cpp/ManagerBase.cpp	/^ManagerBase::~ManagerBase() {$/;"	f	class:ManagerBase
calcStateConstSize	cpp/ManagerBase.cpp	/^long ManagerBase::calcStateConstSize(int varcount, int *varindices, int *stateindices) {$/;"	f	class:ManagerBase
addConstraint	cpp/ManagerBase.cpp	/^int ManagerBase::addConstraint(int varcount, int *varindices, int *stateindices, int* stateindices_c,$/;"	f	class:ManagerBase
getRelation	cpp/ManagerBase.cpp	/^Relation *ManagerBase::getRelation(int *input_vars, int varcount, bool make_project, int *input_states) {$/;"	f	class:ManagerBase
getChildRelation	cpp/ManagerBase.cpp	/^Relation *ManagerBase::getChildRelation(Relation *rel, int skip, bool makeProject, int *stateindices) {$/;"	f	class:ManagerBase
makeProjection	cpp/ManagerBase.cpp	/^bool ManagerBase::makeProjection(Relation *rel) {$/;"	f	class:ManagerBase
makeProjection	cpp/ManagerBase.cpp	/^bool ManagerBase::makeProjection(Table *t1, Table *t2, Relation *rel) {$/;"	f	class:ManagerBase
makeMaxProjection	cpp/ManagerBase.cpp	/^bool ManagerBase::makeMaxProjection(Table *qt, Table *maxpt, Table *inputData, Relation *indRel,$/;"	f	class:ManagerBase
getDefaultDVIndex	cpp/ManagerBase.cpp	/^int ManagerBase::getDefaultDVIndex() {$/;"	f	class:ManagerBase
getDvOrder	cpp/ManagerBase.cpp	/^int ManagerBase::getDvOrder(int index) {$/;"	f	class:ManagerBase
sort_freq	cpp/ManagerBase.cpp	/^static double *sort_freq;$/;"	v	file:
sort_dv_var	cpp/ManagerBase.cpp	/^static Variable *sort_dv_var;$/;"	v	file:
sortDV	cpp/ManagerBase.cpp	/^int sortDV(const void *d1, const void *d2) {$/;"	f
createDvOrder	cpp/ManagerBase.cpp	/^void ManagerBase::createDvOrder() {$/;"	f	class:ManagerBase
getMissingCardinalityFactor	cpp/ManagerBase.cpp	/^double ManagerBase::getMissingCardinalityFactor(Model *model) {$/;"	f	class:ManagerBase
getPredictingVars	cpp/ManagerBase.cpp	/^void ManagerBase::getPredictingVars(Model *model, int *varindices, int &varcount, bool includeDeps) {$/;"	f	class:ManagerBase
getRelevantVars	cpp/ManagerBase.cpp	/^void ManagerBase::getRelevantVars(Model *model, int *varindices, int &varcount, bool includeDeps) {$/;"	f	class:ManagerBase
getIndRelation	cpp/ManagerBase.cpp	/^Relation *ManagerBase::getIndRelation() {$/;"	f	class:ManagerBase
getDepRelation	cpp/ManagerBase.cpp	/^Relation *ManagerBase::getDepRelation() {$/;"	f	class:ManagerBase
makeProjections	cpp/ManagerBase.cpp	/^bool ManagerBase::makeProjections(Model *model) {$/;"	f	class:ManagerBase
deleteTablesFromCache	cpp/ManagerBase.cpp	/^void ManagerBase::deleteTablesFromCache() {$/;"	f	class:ManagerBase
deleteModelFromCache	cpp/ManagerBase.cpp	/^bool ManagerBase::deleteModelFromCache(Model *model) {$/;"	f	class:ManagerBase
intersect	cpp/ManagerBase.cpp	/^static bool intersect(Relation *rel1, Relation *rel2, int* &var, int &count) {$/;"	f	file:
expandTuple	cpp/ManagerBase.cpp	/^void ManagerBase::expandTuple(double tupleValue, KeySegment *key, int *missingVars, int missingCount,$/;"	f	class:ManagerBase
makeOrthoExpansion	cpp/ManagerBase.cpp	/^void ManagerBase::makeOrthoExpansion(Relation *rel, Table *outTable) {$/;"	f	class:ManagerBase
makeSbExpansion	cpp/ManagerBase.cpp	/^void ManagerBase::makeSbExpansion(Relation *rel, Table *table) {$/;"	f	class:ManagerBase
hasLoops	cpp/ManagerBase.cpp	/^bool ManagerBase::hasLoops(Model *model) {$/;"	f	class:ManagerBase
setSearchDirection	cpp/ManagerBase.cpp	/^void ManagerBase::setSearchDirection(Direction dir) {$/;"	f	class:ManagerBase
computeDF	cpp/ManagerBase.cpp	/^double ManagerBase::computeDF(Relation *rel) { \/\/ degrees of freedom$/;"	f	class:ManagerBase
computeDfSb	cpp/ManagerBase.cpp	/^double ManagerBase::computeDfSb(Model *model) {$/;"	f	class:ManagerBase
computeDF	cpp/ManagerBase.cpp	/^double ManagerBase::computeDF(Model *model) {$/;"	f	class:ManagerBase
computeH	cpp/ManagerBase.cpp	/^double ManagerBase::computeH(Relation *rel) \/\/ uncertainty$/;"	f	class:ManagerBase
computeH	cpp/ManagerBase.cpp	/^double ManagerBase::computeH(Model *model, HMethod method, int SB) {$/;"	f	class:ManagerBase
computeTransmission	cpp/ManagerBase.cpp	/^double ManagerBase::computeTransmission(Model *model, HMethod method, int SB) {$/;"	f	class:ManagerBase
DFAndHProc	cpp/ManagerBase.cpp	/^struct DFAndHProc: public ocIntersectProcessor {$/;"	s	file:
df	cpp/ManagerBase.cpp	/^        double df;$/;"	m	struct:DFAndHProc	file:
h	cpp/ManagerBase.cpp	/^        double h;$/;"	m	struct:DFAndHProc	file:
manager	cpp/ManagerBase.cpp	/^        ManagerBase *manager;$/;"	m	struct:DFAndHProc	file:
DFAndHProc	cpp/ManagerBase.cpp	/^        DFAndHProc(ManagerBase *mgr) {$/;"	f	struct:DFAndHProc
process	cpp/ManagerBase.cpp	/^        void process(bool sign, Relation *rel, int count) {$/;"	f	struct:DFAndHProc
calculateDfAndEntropy	cpp/ManagerBase.cpp	/^void ManagerBase::calculateDfAndEntropy(Model *model) {$/;"	f	class:ManagerBase
doIntersectionProcessing	cpp/ManagerBase.cpp	/^void ManagerBase::doIntersectionProcessing(Model *model, ocIntersectProcessor *proc) {$/;"	f	class:ManagerBase
computeStatistics	cpp/ManagerBase.cpp	/^void ManagerBase::computeStatistics(Relation *rel) {$/;"	f	class:ManagerBase
computeRelWidth	cpp/ManagerBase.cpp	/^void ManagerBase::computeRelWidth(Model *model) {$/;"	f	class:ManagerBase
computeLR	cpp/ManagerBase.cpp	/^double ManagerBase::computeLR(Model *model) {$/;"	f	class:ManagerBase
computeDDF	cpp/ManagerBase.cpp	/^double ManagerBase::computeDDF(Model *model) {$/;"	f	class:ManagerBase
computeIncrementalAlpha	cpp/ManagerBase.cpp	/^void ManagerBase::computeIncrementalAlpha(Model *model) {$/;"	f	class:ManagerBase
compareProgenitors	cpp/ManagerBase.cpp	/^void ManagerBase::compareProgenitors(Model *model, Model *newProgen) {$/;"	f	class:ManagerBase
setValuesAreFunctions	cpp/ManagerBase.cpp	/^void ManagerBase::setValuesAreFunctions(int flag) {$/;"	f	class:ManagerBase
makeModel	cpp/ManagerBase.cpp	/^Model *ManagerBase::makeModel(const char *name, bool makeProject) {$/;"	f	class:ManagerBase
MAXSTATENAME	cpp/ManagerBase.cpp	/^#define MAXSTATENAME /;"	d	file:
makeSbModel	cpp/ManagerBase.cpp	/^Model *ManagerBase::makeSbModel(const char *name, bool makeProject) {$/;"	f	class:ManagerBase
printOptions	cpp/ManagerBase.cpp	/^void ManagerBase::printOptions(bool printHTML, bool skipNominal) {$/;"	f	class:ManagerBase
printSizes	cpp/ManagerBase.cpp	/^void ManagerBase::printSizes() {$/;"	f	class:ManagerBase
dumpRelations	cpp/ManagerBase.cpp	/^void ManagerBase::dumpRelations() {$/;"	f	class:ManagerBase
fitTestAlgebraic	cpp/ManagerBase.cpp	/^void ManagerBase::fitTestAlgebraic(Model* model, Table* algTable, double missingCard, const FitIntersectMap& fitIs) {$/;"	f	class:ManagerBase
makeFitTableAlgebraic	cpp/ManagerBase.cpp	/^bool ManagerBase::makeFitTableAlgebraic(Model* model) {$/;"	f	class:ManagerBase
makeFitTableIPF	cpp/ManagerBase.cpp	/^bool ManagerBase::makeFitTableIPF(Model* model) {$/;"	f	class:ManagerBase
makeFitTable	cpp/ManagerBase.cpp	/^bool ManagerBase::makeFitTable(Model *model) {$/;"	f	class:ManagerBase
computeIntersectLevels	cpp/ManagerBase.cpp	/^FitIntersectMap ManagerBase::computeIntersectLevels(Model* model) {$/;"	f	class:ManagerBase
disownTable	cpp/ManagerBase.cpp	/^Table* ManagerBase::disownTable() {$/;"	f	class:ManagerBase
getIndepTable	cpp/ManagerBase.cpp	/^Table* ManagerBase::getIndepTable() {$/;"	f	class:ManagerBase
projectedFit	cpp/ManagerBase.cpp	/^Table* ManagerBase::projectedFit(Relation* projectTo, Model* fitModel) {$/;"	f	class:ManagerBase
projectedModel	cpp/ManagerBase.cpp	/^Model* ManagerBase::projectedModel(Relation* projectTo, Model* model) {$/;"	f	class:ManagerBase
initFromCommandLine	cpp/ManagerInitFromCommandLine.cpp	/^bool ManagerBase::initFromCommandLine(int argc, char **argv) {$/;"	f	class:ManagerBase
